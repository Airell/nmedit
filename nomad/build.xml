<project name="nomad" default="info" basedir=".">

  <property name="libs-path" value="../libs/" />
  <property name="installer-script-path" value="nomad-config/" />
  <property name="installer-script" value="_INSTALLER_ant.xml" />

  <property name="nomad-source" value="./nomad-source/" />
  <property name="dist" value="./nomad-dist/" />
  <property name="osxdist" value="./osx-dist/" />
  <property name="projectutils" location="project-utils"/>
  <property name="libprojectutils" location="${projectutils}/project-utils.jar"/>
	
  <target name="check-libs-path">
      <condition property="libs-path.exists"><available file="${libs-path}"/></condition>
  </target>
  <target name="validate-libs-path" depends="check-libs-path" unless="libs-path.exists">
      <fail>The path '${libs-path}' does not exist. Please checkout the directory and it's contents from CVS.</fail>
  </target>

  <target name="info" description="build script info" depends="validate-libs-path" >
<echo>Nomad ANT build script (http://nmedit.sourcecforge.net/)
Following targets are available:
  [nomad]
  run*      - starts nomad
  build     - builds nomad (not implemented)
  dist      - distributes nomad
  clean     - cleans the build/dist files (not implemented)
  nomadjar  - creates the nomad.jar file
  src-license - checks if the GPL license is present in all .java files

  * you have to call the 'configure' target once before you call this target

  [project]
  configure - configures the project
              call this after you checked out the project from CVS or if the source
              of one of the libraries (in ../libs/) was changed. This target compiles
              the libraries located in ../libs/ and install them in the plugin folders
              of nomad
  revert    - uninstalls libraries/resources which were installed using configure
  clean-libs - calls the clean target (or equivalent) in the libraries located in ../libs/
Note:
  If you checked out the project from CVS the first time you should run the configure target.
  It will install the required libraries in the corresponding locations of the nomad-source directory.
</echo>
  </target>

  <target name="configure" description="configure project" depends="validate-libs-path">
    <ant inheritAll="false" antfile="${installer-script}" dir="${installer-script-path}" target="install" />
    <ant inheritAll="false" antfile="build.xml" dir="${nomad-source}/net.sf.nmedit.nomad.boot.splash" target="install" />
      <!-- create nomad.jar -->
      <antcall inheritAll="false" target="nomadjar"></antcall>
  </target>
  
  <target name="revert" description="reverts 'configure'">
    <!--
      <fail>TODO disabled for safety reasons</fail>-->
      	
      <ant inheritAll="false" antfile="${installer-script}" dir="${installer-script-path}" target="uninstall" />
      <ant inheritAll="false" antfile="build.xml" dir="${nomad-source}/net.sf.nmedit.nomad.boot.splash" target="uninstall" />
  </target>
  
  <target name="clean-libs" description="clean-libs">
    <!--
    <fail>TODO disabled for safety reasons</fail>
  	-->
    <ant inheritAll="false" antfile="${installer-script}" dir="${installer-script-path}" target="reverse-clean" />
      
  </target>

  <target name="run">
  	<echo>Starting Nomad...</echo>
    <java classname="org.java.plugin.boot.Boot"
    	dir="${nomad-source}/"
        fork="true"
        failonerror="true" >
    	<classpath>      
    		<fileset dir="${nomad-source}/libs">
	            <include name="jpf-boot.jar"/>
	            <include name="nomad-splash.jar"/>
    	    </fileset>
        </classpath>
    </java>
  </target>
	

  <target name="nomadjar">
  	<jar destfile="${nomad-source}/nomad.jar">
  	    <manifest>
  	        <attribute name="Main-class" value="org.java.plugin.boot.Boot"/>
  	        <attribute name="Class-Path" value="libs/nomad-splash.jar libs/jpf-boot.jar"/>
  	    </manifest>
  	</jar>
  </target>
	
  <!-- building nomad -->
  <typedef classpath="jpf/jpf-tools.jar:nomad-source/libs/jpf.jar" resource="org/java/plugin/tools/ant/jpf-tasks.properties" />
	

  <target name="check"
	        description="Checks plug-ins integrity">
		<jpf-check basedir="${nomad-source}/plugins"
		           includes="*/plugin.xml,*/plugin-fragment.xml"
		           verbose="true"
		           usepathresolver="true" />
  </target>

  <!-- compiles the classes and bundles them in a jar, afterwards delete classes and source -->
  <target name="make_jar_for_plugin_and_clean">
  	<!-- requires parameter plugin_id -->
  	<property name="plugin_dir" value="${dist}/plugins/${plugin_id}" />
  	<!-- switch jpf-plugin configuration 'plugin.dist.xml' to 'plugin.xml' -->
  	<delete file="${plugin_dir}/plugin.xml" />
  	<rename src="${plugin_dir}/plugin.dist.xml" dest="${plugin_dir}/plugin.xml" />

  	<!-- call build script -->
    <ant antfile="build.xml" dir="${plugin_dir}" target="pluginjar" />
  	<!-- delete src -->
  	<delete dir="${plugin_dir}/src" />
  	<!-- delete classes -->
  	<delete dir="${plugin_dir}/classes" />
  </target>
	
  <target name="clean-dist">
  	<!-- delete previous dist dir -->
  	<delete dir="${dist}" />
  </target>

  <target name="dist" depends="clean-libs,revert,clean-dist,configure,nomadjar,buildutils">
  	
  	<!-- creating dist root -->
	<mkdir dir="${dist}"/>
  	<!-- plugin directory -->
  	<mkdir dir="${dist}/plugin-tmp" />
  	

  	<copy file="${nomad-source}/boot.properties" todir="${dist}" />
	<copy file="${nomad-source}/log4j.dist.properties" tofile="${dist}/log4j.properties" />
	<copy file="${nomad-source}/commons-logging.properties" todir="${dist}" />
	<copy file="${nomad-source}/LICENSE_nomad.txt" todir="${dist}" />
	<copy file="${nomad-source}/nomad.jar" todir="${dist}" />
	<copy file="${nomad-source}/splash02.png" todir="${dist}" />
  	
  	<copy todir="${dist}/libs">
  		<fileset dir="${nomad-source}/libs" />
  	</copy>

  	<copy todir="${dist}/plugins">
  		<fileset dir="${nomad-source}/plugins" />
  	</copy>

  	<!-- order is importent due to plugin dependencies -->
  	<antcall target="make_jar_for_plugin_and_clean">
  	  <param name="plugin_id" value="net.sf.nmedit.nomad.core" />
  	</antcall>
  	<antcall target="make_jar_for_plugin_and_clean">
  	  <param name="plugin_id" value="net.sf.nmedit.patchmodifier" />
  	</antcall>
  	<antcall target="make_jar_for_plugin_and_clean">
  	  <param name="plugin_id" value="net.sf.nmedit.jtheme" />
  	</antcall>
  	<antcall target="make_jar_for_plugin_and_clean">
  	  <param name="plugin_id" value="net.sf.nmedit.jsynth" />
  	</antcall>
  	<antcall target="make_jar_for_plugin_and_clean">
  	  <param name="plugin_id" value="net.sf.nmedit.nordmodular" />
  	</antcall>
  	
  	<!-- dont include miniworks plugin -->
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.waldorf.miniworks4pole" />
  	<!-- delete unused files -->
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.nomad.core/forms" />
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.jsynth/forms" />
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.nordmodular/forms" />
  	
  	<!-- delete remaining build scripts -->
  	<delete>    
  		<fileset dir="${dist}/plugins" includes="**/build.xml"/>
  	</delete>
  	
  	<!-- zip plugins -->
  	<!-- broken:
  	<jpf-zip basedir="${dist}/plugins" 
  		includes="*/plugin.xml,*/plugin-fragment.xml" 
  		destdir="${dist}/plugins">
  	</jpf-zip>
	<delete includeemptydirs="true">
		<fileset dir="${dist}/plugins">
			<include name="**/*" />
			<exclude name="*.zip" />
		</fileset>
	</delete>  -->

  	<!-- fixing dist -->
  	<echo>fixing dist</echo>
  	<delete file="${dist}/libs/README_jpf.txt" />
  	<delete file="${dist}/libs/RELEASE-NOTES_commons-logging.txt" />
  	<delete file="${dist}/libs/NOTICE_log4j.txt" />
  	<delete file="${dist}/libs/NOTICE_commons-logging.txt" />
  	
  	<!-- validate dist -->
    <antcall inheritAll="false" target="validate-dist"></antcall>
  	
  </target>
  
  <target name="buildutils">
  	<!-- make build utils -->
    <ant inheritAll="false" antfile="${projectutils}/build.xml" dir="${projectutils}" target="build" />
  </target>
  
  <target name="validate-dist">
    <!-- validate class files -->
  	<java jar="${libprojectutils}" dir="." failonerror="true" fork="true">
  	  <arg line="-validate-class-version -version J2SE_5.0 nomad-dist"/>
  	</java>
  </target>
	
  <target name="src-license" depends="buildutils">
    <!-- validate .java file license statements -->
  	<java jar="${libprojectutils}" dir="." failonerror="true" fork="true">
  	  <arg line="-license . ../libs -not ./nomad-offline"/>
  	</java>
  </target>

	<taskdef name="jarbundler"
	     classpath="ant/jarbundler-1.9.jar"
         classname="net.sourceforge.jarbundler.JarBundler" />
         
  <target name="osx-dist" depends="dist,clean-osx-dist">
	<mkdir dir="${osxdist}"/>
  	<jarbundler dir="${osxdist}"
            name="Nomad"
            icon="artwork/icns/nomad.icns"
            mainclass="org.java.plugin.boot.Boot"
            jvmversion="1.5*"
            workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
       <jarfilelist dir="${dist}" files="nomad.jar"/>
       <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
       <javafileset dir="${dist}">
         <include name="**/*"/>
       </javafileset>
       
       <documenttype name="Nord Modular Patch" extensions="pch" role="Editor"/>
    </jarbundler>
  </target>	
  
  <target name="clean-osx-dist">
     <delete dir="${osxdist}"/>
  </target>
	<!--
  <target name="clean-nomad">
  	<delete dir="${nomad-dist}" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.nomad.core/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.nomad.core/" target="clean" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.jsynth/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.jsynth/" target="clean" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.jsynth/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.nordmodular/" target="clean" />
  </target>
	-->
</project>

