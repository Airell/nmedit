<project name="nomad" default="info" basedir=".">

  <property name="libs-path" value="../libs/" />
  <property name="installer-script-path" value="nomad-config/" />
  <property name="installer-script" value="_INSTALLER_ant.xml" />

  <property name="nomad-source" value="./nomad-source/" />
  <property name="dist" value="./nomad-dist/" />
	
  <target name="check-libs-path">
      <condition property="libs-path.exists"><available file="${libs-path}"/></condition>
  </target>
  <target name="validate-libs-path" depends="check-libs-path" unless="libs-path.exists">
      <fail>The path '${libs-path}' does not exist. Please checkout the directory and it's contents from CVS.</fail>
  </target>

  <target name="info" description="build script info" depends="validate-libs-path" >
<echo>Nomad ANT build script (http://nmedit.sourcecforge.net/)
Following targets are available:
  [nomad]
  run*      - starts nomad
  build     - builds nomad (not implemented)
  dist*     - distributes nomad
  clean     - cleans the build/dist files (not implemented)
  nomadjar  - creates the nomad.jar file

  * you have to call the 'configure' target once before you call this target

  [project]
  configure - configures the project
              call this after you checked out the project from CVS or if the source
              of one of the libraries (in ../libs/) was changed. This target compiles
              the libraries located in ../libs/ and install them in the plugin folders
              of nomad
  revert    - uninstalls libraries/resources which were installed using configure
  clean-libs - calls the clean target (or equivalent) in the libraries located in ../libs/
Note:
  If you checked out the project from CVS the first time you should run the configure target.
  It will install the required libraries in the corresponding locations of the nomad-source directory.
</echo>
  </target>

  <target name="configure" description="configure project" depends="validate-libs-path">
      <ant antfile="${installer-script}" dir="${installer-script-path}" target="install" />
  	  <ant antfile="build.xml" dir="${nomad-source}/net.sf.nmedit.nomad.boot.splash" target="install" />
      <!-- create nomad.jar -->
  	  <antcall target="nomadjar"></antcall>
  </target>
  
  <target name="revert" description="reverts 'configure'">
    <!--
      <fail>TODO disabled for safety reasons</fail>-->
      	
      <ant antfile="${installer-script}" dir="${installer-script-path}" target="uninstall" />
	  <ant antfile="build.xml" dir="${nomad-source}/net.sf.nmedit.nomad.boot.splash" target="uninstall" />
  </target>
  
  <target name="clean-libs" description="clean-libs">
    <!--
    <fail>TODO disabled for safety reasons</fail>
  	-->
      <ant antfile="${installer-script}" dir="${installer-script-path}" target="reverse-clean" />
      
  </target>

  <target name="run">
  	<echo>Starting Nomad...</echo>
    <java classname="org.java.plugin.boot.Boot"
    	dir="${nomad-source}/"
        fork="true"
        failonerror="true" >
    	<classpath>      
    		<fileset dir="${nomad-source}/libs">
	            <include name="jpf-boot.jar"/>
	            <include name="nomad-splash.jar"/>
    	    </fileset>
        </classpath>
    </java>
  </target>
	

  <target name="nomadjar">
  	<jar destfile="${nomad-source}/nomad.jar">
  	    <manifest>
  	        <attribute name="Main-class" value="org.java.plugin.boot.Boot"/>
  	        <attribute name="Class-Path" value="libs/nomad-splash.jar libs/jpf-boot.jar"/>
  	    </manifest>
  	</jar>
  </target>
	
  <!-- building nomad -->
  <typedef classpath="jpf/jpf-tools.jar:nomad-source/libs/jpf.jar" resource="org/java/plugin/tools/ant/jpf-tasks.properties" />
  <target name="dist"   depends="configure">
  	<!-- creating dist root -->
	<mkdir dir="${dist}"/>
  	<!-- plugin directory -->
  	<mkdir dir="${dist}/plugin-tmp" />
  	

  	<copy file="${nomad-source}/boot.properties" todir="${dist}" />
	<copy file="${nomad-source}/log4j.properties" todir="${dist}" />
	<copy file="${nomad-source}/commons-logging.properties" todir="${dist}" />
	<copy file="${nomad-source}/LICENSE_nomad.txt" todir="${dist}" />
	<copy file="${nomad-source}/nomad.jar" todir="${dist}" />
	<copy file="${nomad-source}/splash02.png" todir="${dist}" />
  	
  	<copy todir="${dist}/libs">
  		<fileset dir="${nomad-source}/libs" />
  	</copy>

  	<copy todir="${dist}/plugins">
  		<fileset dir="${nomad-source}/plugins" />
  	</copy>

  	<!-- dont include miniworks plugin -->
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.waldorf.miniworks4pole" />
  	<!-- delete src files -->
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.nordmodular/src" />
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.jsynth/src" />
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.jtheme/src" />
  	<delete includeEmptyDirs="true" dir="${dist}/plugins/net.sf.nmedit.nomad.core/src" />
  	<!-- zip plugins -->
  	<!--
  	<jpf-zip basedir="${dist}/plugins" includes="*/*.xml" excludes="CVS"
  		destdir="${dist}/plugins">
  	</jpf-zip> -->

  	<!-- delete tmp dir -->
  	<delete includeEmptyDirs="true" defaultexcludes="false" dir="${dist}/plugins/tmp" />
  
  	<!-- fixing dist -->
  	<echo>fixing dist</echo>
  	<delete file="${dist}/libs/README_jpf.txt" />
  	<delete file="${dist}/libs/RELEASE-NOTES_commons-logging.txt" />
  	<delete file="${dist}/libs/NOTICE_log4j.txt" />
  	<delete file="${dist}/libs/NOTICE_commons-logging.txt" />
  	
  </target>
  
  
	
	<!--
  <target name="clean-nomad">
  	<delete dir="${nomad-dist}" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.nomad.core/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.nomad.core/" target="clean" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.jsynth/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.jsynth/" target="clean" />
    <ant antfile="${nomad-source}/plugins/net.sf.nmedit.jsynth/build.xml" dir="${nomad-source}/plugins/net.sf.nmedit.nordmodular/" target="clean" />
  </target>
	-->
</project>

