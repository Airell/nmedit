/*
 * parse failed:
 *   F0 33 50 06 07 3A 00 07 00 00 00 00 00 00 00 00 00 41 F7
 *   F0 33 50 06 20 3A 00 07 00 F0 33 50 06 20 39 00 11 00 00 00 00 00 00 63 F7
 */

start Sysex;

Sysex :=
	0xf0:8 // status byte
    messageId("sysex")
	0x33:8 // manufacturer id
	manufacturer := "Clavia Digital Instruments"
	
	0:1 cc:5 slot:2
	0x06:8
	switch(cc)
	{
		case 0x00: IAm$data
		case 0x13: Parameter$data
		case 0x14: NMInfo$data
		case 0x16: ACK$data
		case 0x17: PatchHandling$data
		case 0x1c: PatchPacketExtra$$ 
		case 0x1d: PatchPacketExtra$$
		case 0x1e: PatchPacketExtra$$
		case 0x1f: PatchPacketExtra$$
		default:   fail
	}

	0xf7:8
	;

/**
 * Adds anonym variables to PatchPacket messages. Computes the first/last variables from the cc value.
 * @variable first 1 (true) if this is the first PatchMessage in a sequence of PatchMessage, 0 (false) otherwise 
 * @variable last  1 (true) if this is the last PatchMessage in a sequence of PatchMessage, 0 (false) otherwise 
 */
PatchPacketExtra :=
        %first:1 = (cc&1)
        %last:1  = ((cc>>1)&1)
        PatchPacket$data
    ;

IAm :=
    messageId("iam")
	0:1 sender:7 0:1 versionHigh:7 0:1 versionLow:7
	switch (sender)
	{
		case 0: 0:0
		case 1: IAmIdentification$identification
		default: fail
	}
	;

// reserved:
//     reserved byte (usually zero)
// serial1, serial2:
//     serial = ((serial1&0x7F)<<7) | (serial2&0x7F)
//     computes the last four digits of the serial number
// deviceId:
//     0x00 = Nord Modular Keyboard
//     0x01 = Nord Modular Rack
//     0x02 = Micro Modular
IAmIdentification :=
	0:1 reserved:7 
	0:1 serial1:7 
	0:1 serial2:7 
	0:1 deviceId:7
	;

Parameter :=
	0:1 pid:7 0:1 sc:7
	
	switch(sc)
	{
		case 0x2f: ParameterSelect$data
		case 0x40: ParameterChange$data
		case 0x43: MorphRangeChange$data
		default: fail
	}
	checksum$$
	;

ParameterSelect :=
    messageId("ParameterSelect")
    /* unknown1 always zero ??? */
	0:1 unknown1:7 0:1 section:7 0:1 module:7 0:1 parameter:7
	;

ParameterChange :=
	0:1 section:7 0:1 module:7 0:1 parameter:7 0:1 value:7
	;

MorphRangeChange :=
	0:1 section:7 0:1 module:7 0:1 parameter:7 0:1 span:7 0:1 direction:7
	;

NMInfo :=
    messageId("nminfo")

	0:1 pid:7 0:1 sc:7
	switch(sc)
	{
	  case 0x05: { messageId("voicecount") VoiceCount$data }
	  case 0x07: { messageId("slotsselected") SlotsSelected$data }
	  case 0x09: { messageId("slotactivated") SlotActivated$data }
	  case 0x13: { messageId("unknownNMInfo") UnknownNMInfo$data }
	  case 0x25: { messageId("knobAssignment") KnobAssignment$data }
	  case 0x26: { messageId("knobAssignment") KnobAssignmentChange$data }
	  case 0x27: { messageId("SetPatchTitle") SetPatchTitle$data }
	  case 0x2f: ParameterSelect$data
	  case 0x38: { messageId("newPatchInSlot") NewPatchInSlot$data }
	  case 0x39: { messageId("lights") Lights$data }
	  case 0x3a: { messageId("meters") Meters$data }
	  case 0x40: { messageId("knobChange") KnobChange$data }
	  case 0x43: { messageId("morphRangeChange") MorphRangeChange$data }
	  case 0x41: VUMeters$data
	  case 0x7e: Error$data
	  default: fail
	}
	checksum$$
	;

// cause of message: unknown (I believe I only had turned the knobs at the synth ?)
// example: F0 33 50 06 04 13 (51 06 16 00 03 02 56 45 6C 70 69 61 6E 6F 20 36 00 05) 7B F7 (name='VElpiano 6')
UnknownNMInfo :=
	0:1 unknown1:7
	0:1 unknown2:7
	0:1 unknown3:7
	0:1 unknown4:7
	0:1 unknown5:7
	0:1 unknown6:7
	0:1 unknown7:7
	String$name
	0:1 unknown8:7
	;

VoiceCount :=
	0:1 c0:7 0:1 c1:7 0:1 c2:7 0:1 c3:7
	;

SlotsSelected :=
	0:4 slot0:1 slot1:1 slot2:1 slot3:1
	;

SlotActivated :=
	0:1 slot:7
	;

NewPatchInSlot :=
	0:1 slot:7 0:1 pid:7
	;

Lights :=
    ( BigLightsMessage$$
    | UnknownLightsMessage$$)
    ;

/* happend while sending many many many and much more patch messages
 * in a short period of time.
 * all variables were set to 0
 * see MESSAGE#1: @2008/02/25
 */ 
UnknownLightsMessage :=
    messageId("unknown")
    0:1 unknown1:7
    0:1 unknown2:7
    0:1 unknown3:7
    0:1 unknown4:7
    ;

BigLightsMessage :=
	0:1 startIndex:7
	0:2 l2:2 l1:2 l0:2
	0:2 l5:2 l4:2 l3:2
	0:2 l8:2 l7:2 l6:2
	0:2 l11:2 l10:2 l9:2
	0:2 l14:2 l13:2 l12:2
	0:2 l17:2 l16:2 l15:2
	0:4 l19:2 l18:2
	;

Meters :=
	0:1 startIndex:7
	0:1 b0:7 0:1 a0:7 
	0:1 b1:7 0:1 a1:7 
	0:1 b2:7 0:1 a2:7 
	0:1 b3:7 0:1 a3:7 
	0:1 b4:7 0:1 a4:7 
	;

VUMeters :=
	0:1 vui:7 0:1 u0r:7 0:1 vu0l:7 0:1 vu1r:7 0:1 vu1l:7 0:1
	vu2r:7 0:1 vu2l:7 0:1 vu3r:7 0:1 vu3l:7 0:1 vu4r:7 0:1 vu4l:7
	;

Error :=
    messageId("error")
	0:1 code:7
	;

KnobChange :=
	0:1 section:7 0:1 module:7 0:1 parameter:7 0:1 value:7
	;

ACK :=
    messageId("ack")
	0:1 pid1:7 0:1 type:7 0:1 pid2:7
	
	switch(type)
	{
	  case 0x7f: {} /* parsing of packet is complete => no checksum */
	  case 0x0d: { UnknownACKReply$data        checksum$$ }
      case 0x36: { /* no data */               checksum$$ }
	  case 0x13: { PatchListResponse$patchList checksum$$ }
	  case 0x15: { PatchListResponse$patchList checksum$$ }
	  case 0x38: { PatchLoadResponse$patchLoad checksum$$ }
	  default: fail
	}
	;

checksum :=
	@lblDataEnd
	0:1 checksum:7 = ([+;0;@lblDataEnd;8;$]%128)
	;

// Note:
// The UnknownACKReply is sent as reply to a LoadPatchMessage
// where the source (bank, position) contained no patch.
// The operation is probably not valid, the ACK might contain an error message.
// In each recorded sample message (about 20) unknown1 is alway 0, unknown2 always 1.
// 'pid2' contains the bank index, 'pid3' contains the bank position.
// A slot index was not included in this message.
// Example message: F0 33 58 06 08 0D 08 (21 00 01) 40 F7
UnknownACKReply :=
	0:1 pid3:7
	0:1 unknown1:7
	0:1 unknown2:7
	;

// note: (reply case 1)
//  received as reply after loading a patch from a bank to a slot
//  - pid2 : destination slot index
//  - pid3 : patch id
//  - section/position: bank position
//  - unknown2 always 13(dec) 
//  - unknown5 always 0
// note: further situations where this message is sent are possible
PatchLoadResponse :=
	0:1 pid3:7 0:1 unknown2:7 0:1 section:7 0:1 position:7
	0:1 unknown5:7 0:1 unknown6:7 
	;

PatchHandling :=
	(	PatchModification$data
	|   PatchCommand$data )
	checksum$$
	;

PatchCommand :=
	0:1 pp:7
	switch(pp)
	{
	  case 0x41: PatchManagerCommand$command
	  case 0x44: GetSynthSettings$command
	  default: fail
	}
	;

GetSynthSettings  :=
    0:1 0x02:7 0:1 0x06:7 0:1 0x08:7 0:1 0x04:7
    ;

PatchManagerCommand :=
	0:1 ssc:7
	switch(ssc)
	{
	  case 0x07: SelectSlots$data
	  case 0x09: ActivateSlot$data
	  case 0x0a: LoadPatch$data
	  case 0x0b: StorePatch$data
	  case 0x0c: DeletePatch$data
	  case 0x35: RequestPatch$data
	  case 0x14: GetPatchList$data
	}
	;

SelectSlots :=
	0:4 slot0:1 slot1:1 slot2:1 slot3:1
	;

ActivateSlot :=
	0:1 slot:7
	;

LoadPatch :=
	0:1 slot:7 0:1 section:7 0:1 position:7
	;

StorePatch :=
	0:1 slot:7 0:1 section:7 0:1 position:7
	;

DeletePatch :=
	0:1 section:7 0:1 position:7 0:8
	;

RequestPatch :=
	;

GetPatchList :=
	0:1 section:7 0:1 position:7
	;

PatchModification :=
	0:1 pid:7 0:1 sc:7

    switch(sc)
    {
	  case 0x64: MorphAssignment$data
	  case 0x20: GetPatchPartExtra$data
	  case 0x41: NoteEvent$data
	  case 0x4b: GetPatchPartExtra$data
	  case 0x4c: GetPatchPartExtra$data
	  case 0x4e: GetPatchPartExtra$data
	  case 0x53: GetPatchPartExtra$data
	  case 0x61: GetPatchPart$data
	  case 0x63: GetPatchPart$data
	  case 0x66: GetPatchPart$data
	  case 0x68: GetPatchPart$data
	
	  case 0x22: MidiCtrlAssignment$data
	  case 0x23: MidiCtrlAssignmentChange$data
	  case 0x25: KnobAssignment$data
	  case 0x26: KnobAssignmentChange$data
	  case 0x27: SetPatchTitle$data
	  case 0x32: ModuleDeletion$data
	  case 0x33: SetModuleTitle$data
	  case 0x34: ModuleMove$data
	  case 0x50: CableInsert$data
	  case 0x51: CableDelete$data
	  case 0x54: CableMove$data
	  case 0x55: SendControllerSnapshot$data
	  case 0x56: Note$data
	  case 0x58: GetCurrentNotes$data
	  case 0x67: MorphKeyboardAssignment$data
	  default: fail
	}
	;

MorphKeyboardAssignment :=
	0:1 morph:7 0:1 keyboard:7 ?NextMorphKeyboardAssignment$data
	;

NextMorphKeyboardAssignment :=
	0:1 0x67:7 MorphKeyboardAssignment$data
	;

SetPatchTitle :=
	String$name
	;

SetModuleTitle :=
	0:1 section:7 0:1 module:7 String$name 
	;

NoteEvent :=
    messageId("noteEvent")
	0:1 velocity:7 0:1 onoff:7 0:1 note:7
	;
	
MorphAssignment :=
	0:1 0x01:6 section:1 0:1 module:7 0:1 parameter:7
	0:1 morph:7 0:1 0x0:7 0:1 0x0:7
	;

GetPatchPartExtra :=
	0:1 payload:7
	;

GetPatchPart :=
	;

KnobAssignment :=
	0:1 module:7 0:1 parameter:7 0:1 section:2 knob:5
	;

KnobAssignmentChange :=
	0:1 prevknob:7 ?NewKnobAssignmentPacket$data
	;

NewKnobAssignmentPacket :=
	0:1 0x25:7 KnobAssignment$data
	;

MidiCtrlAssignment :=
	0:1 section:7 0:1 module:7 0:1 parameter:7 0:1 midictrl:7
	;

MidiCtrlAssignmentChange :=
	0:1 prevmidictrl:7 ?NewMidiCtrlAssignmentPacket$data
	;

NewMidiCtrlAssignmentPacket :=
	0:1 0x22:7 MidiCtrlAssignment$data
	;

ModuleDeletion :=
	0:1 section:7 0:1 module:7
	?NextModuleDeletion$next
	;

NextModuleDeletion :=
	0:1 0x32:7 ModuleDeletion$data
	;

ModuleMove :=
	0:1 section:7 0:1 module:7 0:1 xpos:7 0:1 ypos:7
	?NextModuleMove$next
	;

NextModuleMove :=
	0:1 0x34:7 ModuleMove$data
	;

CableInsert :=
	0:1 1:3 section:1 color:3
        0:1 module1:7 0:1 type1:1 connector1:6
        0:1 module2:7 0:1 type2:1 connector2:6
	;

CableDelete :=
	0:1 1:6 section:1
        0:1 module1:7 0:1 type1:1 connector1:6
        0:1 module2:7 0:1 type2:1 connector2:6
	;

CableMove :=
	;

SendControllerSnapshot :=
	;

Note :=
	0:1 onOff:7 0:1 note:7
	;

GetCurrentNotes :=
	;

/*
 * We use a temporary hack until the PDLPacketParser does not throw
 * StackOverFlow exceptions any more (this happens with large patch messages).
 * HACK is a variable containing the number of bytes of the embedded stream.
 *
 * previous code:
 *    ?PatchData$next
 */
PatchPacket :=
    messageId("PatchPacket")
	0:1 command:1 pid:6 
	
	%HACK:16 = (0)
	HACK * embedded_stream:8
	
	checksum$$
	;

PatchData :=
	0:1 data:7 ?PatchData$next
	;

PatchListResponse :=
    messageId("PatchListResponse")

    /* the values seem always to be unknown[1..3] = {6,22,1}  */
	unknown1:8 unknown2:8 unknown3:8
	?StringList$data
	0:1 endmarker:7
	;
	
StringList :=
	?ListCmd$cmd
	String$name
	?StringList$next
	;

ListCmd :=
	0:1 code:7
	switch(code)
	{
	  case 0x01: NextPosition$nextposition
      case 0x02: EmptyPosition$emptyposition
	  case 0x03: NextSection$nextsection
	  case 0x05: {0:1 unknown:7 NextSection$repeatedsection } // after overwriting existing patch 
	  default: fail
	}
	;

NextPosition :=
	0:1 position:7
	;

EmptyPosition :=
	0:0
	;

NextSection :=
	0:1 section:7 0:1 position:7
	;

PatchListEnd :=
	0:0
	;

String :=
	16*chars:8/0
	;
