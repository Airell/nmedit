/* The following code was generated by JFlex 1.4.1 on 19.02.08 21:18 */


/* JFlex example: part of Java language lexer specification */

/**
 * This class is a simple example lexer.
 */
package net.sf.nmedit.jpdl2.format;
import net.sf.nmedit.jpdl2.PDLUtils;

@SuppressWarnings({"unused", "static-access"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 19.02.08 21:18 from the specification file
 * <tt>/home/christian/dev/nmedit/libs/jpdl2/format/pdl2.jflex</tt>
 */
class PDL2Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\47"+
    "\1\46\1\20\1\10\1\20\1\20\1\0\1\41\1\43\1\5\1\20"+
    "\1\0\1\20\1\0\1\4\1\12\1\16\10\13\1\53\1\20\1\50"+
    "\1\52\1\51\1\20\1\11\3\15\1\17\2\15\2\6\1\34\21\6"+
    "\1\20\1\54\1\20\1\20\1\6\1\0\1\27\1\44\1\37\1\35"+
    "\1\26\1\22\1\33\1\40\1\21\2\6\1\30\1\32\1\42\1\45"+
    "\2\6\1\24\1\31\1\23\1\25\1\6\1\36\1\14\2\6\1\20"+
    "\1\20\1\20\1\20\41\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6"+
    "\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7"+
    "\5\0\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\1\0\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6"+
    "\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6"+
    "\5\0\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6"+
    "\16\7\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0"+
    "\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7"+
    "\2\0\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\11\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\15\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0"+
    "\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7"+
    "\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7"+
    "\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6"+
    "\4\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0"+
    "\44\7\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0"+
    "\7\7\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6"+
    "\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6"+
    "\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7"+
    "\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6"+
    "\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0"+
    "\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0"+
    "\22\6\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0"+
    "\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6"+
    "\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\2\3\1\4\1\5\1\1\3\6"+
    "\7\4\1\3\1\7\1\3\1\10\1\11\2\3\1\12"+
    "\1\13\1\14\2\0\1\4\1\15\2\0\1\16\1\6"+
    "\1\17\6\4\2\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\0\1\33"+
    "\1\0\1\34\1\6\7\4\2\0\1\35\1\0\1\2"+
    "\1\0\1\34\1\6\1\36\1\4\1\37\3\4\1\40"+
    "\3\0\1\34\1\6\1\41\3\4\1\42\2\0\1\34"+
    "\1\6\1\43\2\4\2\0\1\34\1\6\1\4\1\44"+
    "\2\0\1\34\1\6\1\4\2\0\1\34\1\6\1\45"+
    "\1\46\1\0\1\34\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\132\0\264\0\132\0\341"+
    "\0\341\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\132\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u040b\0\132\0\u0438\0\u0465\0\u0492"+
    "\0\u04bf\0\u04ec\0\u0519\0\u0546\0\132\0\u0573\0\341\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\132"+
    "\0\132\0\132\0\u0708\0\132\0\132\0\132\0\132\0\132"+
    "\0\132\0\132\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\132\0\u09d8\0\u0735\0\u0a05\0\u0a32\0\u0a5f\0\341"+
    "\0\u0a8c\0\341\0\u0ab9\0\u0ae6\0\u0b13\0\341\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\341\0\u0c21\0\u0c4e\0\u0c7b\0\132"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\341\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\341\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\341\0\132"+
    "\0\u102c\0\132\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2"+
    "\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382"+
    "\0\u23af";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\2\10\1\15\1\10\1\7\1\16"+
    "\1\17\1\20\5\10\1\21\1\22\2\10\1\23\1\10"+
    "\1\24\1\10\1\25\1\10\1\7\2\10\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\3\1\34\2\3\43\34"+
    "\1\35\5\34\1\36\57\0\1\5\56\0\1\37\1\40"+
    "\55\0\2\10\1\41\1\0\6\10\1\0\20\10\1\0"+
    "\1\10\1\0\2\10\15\0\1\42\1\0\1\42\3\0"+
    "\2\42\1\0\1\42\1\0\20\42\1\0\1\42\1\0"+
    "\2\42\21\0\1\43\1\0\1\44\1\0\1\43\1\45"+
    "\15\0\1\45\31\0\2\14\2\0\1\14\50\0\1\46"+
    "\1\14\2\0\1\46\1\45\15\0\1\45\25\0\2\10"+
    "\1\41\1\0\6\10\1\0\1\10\1\47\16\10\1\0"+
    "\1\10\1\0\2\10\15\0\2\10\1\41\1\0\6\10"+
    "\1\0\6\10\1\50\11\10\1\0\1\10\1\0\2\10"+
    "\15\0\2\10\1\41\1\0\6\10\1\0\3\10\1\51"+
    "\14\10\1\0\1\10\1\0\2\10\15\0\2\10\1\41"+
    "\1\0\6\10\1\0\15\10\1\52\2\10\1\0\1\10"+
    "\1\0\2\10\15\0\2\10\1\41\1\0\6\10\1\0"+
    "\5\10\1\53\12\10\1\0\1\10\1\0\2\10\15\0"+
    "\2\10\1\41\1\0\6\10\1\0\5\10\1\54\12\10"+
    "\1\0\1\10\1\0\2\10\15\0\2\10\1\41\1\0"+
    "\6\10\1\0\6\10\1\55\11\10\1\0\1\10\1\0"+
    "\2\10\30\0\1\56\22\0\1\57\62\0\1\60\52\0"+
    "\1\61\1\0\1\62\53\0\1\63\1\64\54\0\1\65"+
    "\54\0\1\66\2\0\1\34\2\0\43\34\1\0\5\34"+
    "\24\0\1\67\1\70\15\0\1\71\3\0\1\72\6\0"+
    "\1\37\1\4\1\5\52\37\5\73\1\74\47\73\6\0"+
    "\1\75\1\10\1\75\1\0\2\10\2\75\1\10\1\75"+
    "\1\0\20\75\1\0\1\75\1\0\2\75\15\0\3\42"+
    "\1\0\6\42\1\0\20\42\1\0\1\42\1\0\2\42"+
    "\21\0\1\76\3\0\1\76\1\45\15\0\1\45\31\0"+
    "\2\77\1\0\3\77\2\0\1\77\3\0\2\77\5\0"+
    "\1\77\1\0\1\77\4\0\1\77\22\0\1\100\1\14"+
    "\2\0\1\100\1\45\15\0\1\45\25\0\2\10\1\41"+
    "\1\0\6\10\1\0\1\101\6\10\1\102\10\10\1\0"+
    "\1\10\1\0\2\10\15\0\2\10\1\41\1\0\6\10"+
    "\1\0\4\10\1\103\13\10\1\0\1\10\1\0\2\10"+
    "\15\0\2\10\1\41\1\0\6\10\1\0\1\104\17\10"+
    "\1\0\1\10\1\0\2\10\15\0\2\10\1\41\1\0"+
    "\6\10\1\0\10\10\1\105\7\10\1\0\1\10\1\0"+
    "\2\10\15\0\2\10\1\41\1\0\6\10\1\0\1\10"+
    "\1\106\16\10\1\0\1\10\1\0\2\10\15\0\2\10"+
    "\1\41\1\0\6\10\1\0\10\10\1\107\7\10\1\0"+
    "\1\10\1\0\2\10\51\0\1\110\57\0\1\111\60\0"+
    "\1\112\3\0\5\73\1\113\53\73\1\114\1\113\47\73"+
    "\6\0\3\75\1\0\6\75\1\0\20\75\1\0\1\75"+
    "\1\0\2\75\21\0\1\115\3\0\1\115\1\45\15\0"+
    "\1\45\31\0\2\116\1\0\3\116\2\0\1\116\3\0"+
    "\2\116\5\0\1\116\1\0\1\116\4\0\1\116\22\0"+
    "\1\117\1\14\2\0\1\117\1\45\15\0\1\45\25\0"+
    "\2\10\1\41\1\0\6\10\1\0\7\10\1\120\10\10"+
    "\1\0\1\10\1\0\2\10\15\0\2\10\1\41\1\0"+
    "\6\10\1\0\10\10\1\121\7\10\1\0\1\10\1\0"+
    "\2\10\15\0\2\10\1\41\1\0\6\10\1\0\5\10"+
    "\1\122\12\10\1\0\1\10\1\0\2\10\15\0\2\10"+
    "\1\41\1\0\6\10\1\0\2\10\1\123\15\10\1\0"+
    "\1\10\1\0\2\10\15\0\2\10\1\41\1\0\6\10"+
    "\1\0\10\10\1\124\7\10\1\0\1\10\1\0\2\10"+
    "\15\0\2\10\1\41\1\0\6\10\1\0\6\10\1\125"+
    "\11\10\1\0\1\10\1\0\2\10\15\0\2\10\1\41"+
    "\1\0\6\10\1\0\5\10\1\126\12\10\1\0\1\10"+
    "\1\0\2\10\32\0\1\127\76\0\1\130\7\0\4\73"+
    "\1\5\1\113\47\73\12\0\1\131\3\0\1\131\1\45"+
    "\15\0\1\45\31\0\2\132\1\0\3\132\2\0\1\132"+
    "\3\0\2\132\5\0\1\132\1\0\1\132\4\0\1\132"+
    "\22\0\1\133\1\14\2\0\1\133\1\45\15\0\1\45"+
    "\25\0\2\10\1\41\1\0\6\10\1\0\5\10\1\134"+
    "\12\10\1\0\1\10\1\0\2\10\15\0\2\10\1\41"+
    "\1\0\6\10\1\0\16\10\1\135\1\10\1\0\1\10"+
    "\1\0\2\10\15\0\2\10\1\41\1\0\6\10\1\0"+
    "\6\10\1\136\11\10\1\0\1\10\1\0\2\10\15\0"+
    "\2\10\1\41\1\0\6\10\1\0\4\10\1\137\13\10"+
    "\1\0\1\10\1\0\2\10\52\0\1\140\41\0\1\141"+
    "\36\0\1\142\3\0\1\142\1\45\15\0\1\45\31\0"+
    "\2\143\1\0\3\143\2\0\1\143\3\0\2\143\5\0"+
    "\1\143\1\0\1\143\4\0\1\143\22\0\1\144\1\14"+
    "\2\0\1\144\1\45\15\0\1\45\25\0\2\10\1\41"+
    "\1\0\6\10\1\0\17\10\1\145\1\0\1\10\1\0"+
    "\2\10\15\0\2\10\1\41\1\0\6\10\1\0\12\10"+
    "\1\146\5\10\1\0\1\10\1\0\2\10\15\0\2\10"+
    "\1\41\1\0\6\10\1\0\7\10\1\147\10\10\1\0"+
    "\1\10\1\0\2\10\35\0\1\150\40\0\1\151\3\0"+
    "\1\151\1\45\15\0\1\45\31\0\2\152\1\0\3\152"+
    "\2\0\1\152\3\0\2\152\5\0\1\152\1\0\1\152"+
    "\4\0\1\152\22\0\1\153\1\14\2\0\1\153\1\45"+
    "\15\0\1\45\25\0\2\10\1\41\1\0\6\10\1\0"+
    "\5\10\1\154\12\10\1\0\1\10\1\0\2\10\15\0"+
    "\2\10\1\41\1\0\6\10\1\0\2\10\1\155\15\10"+
    "\1\0\1\10\1\0\2\10\36\0\1\156\37\0\1\157"+
    "\3\0\1\157\1\45\15\0\1\45\31\0\2\160\1\0"+
    "\3\160\2\0\1\160\3\0\2\160\5\0\1\160\1\0"+
    "\1\160\4\0\1\160\22\0\1\161\1\14\2\0\1\161"+
    "\1\45\15\0\1\45\25\0\2\10\1\41\1\0\6\10"+
    "\1\0\13\10\1\162\4\10\1\0\1\10\1\0\2\10"+
    "\51\0\1\163\24\0\1\164\3\0\1\164\1\45\15\0"+
    "\1\45\31\0\2\165\1\0\3\165\2\0\1\165\3\0"+
    "\2\165\5\0\1\165\1\0\1\165\4\0\1\165\22\0"+
    "\1\166\1\14\2\0\1\166\1\45\15\0\1\45\25\0"+
    "\2\10\1\41\1\0\6\10\1\0\14\10\1\167\3\10"+
    "\1\0\1\10\1\0\2\10\52\0\1\170\23\0\1\171"+
    "\3\0\1\171\1\45\15\0\1\45\31\0\2\172\1\0"+
    "\3\172\2\0\1\172\3\0\2\172\5\0\1\172\1\0"+
    "\1\172\4\0\1\172\22\0\1\173\1\14\2\0\1\173"+
    "\1\45\15\0\1\45\31\0\1\174\3\0\1\174\1\45"+
    "\15\0\1\45\31\0\1\175\1\14\2\0\1\175\1\45"+
    "\15\0\1\45\31\0\1\176\3\0\1\176\1\45\15\0"+
    "\1\45\31\0\1\177\1\14\2\0\1\177\1\45\15\0"+
    "\1\45\31\0\1\200\3\0\1\200\1\45\15\0\1\45"+
    "\31\0\1\201\1\14\2\0\1\201\1\45\15\0\1\45"+
    "\31\0\1\202\3\0\1\202\1\45\15\0\1\45\31\0"+
    "\1\203\1\14\2\0\1\203\1\45\15\0\1\45\31\0"+
    "\1\204\3\0\1\204\1\45\15\0\1\45\31\0\1\205"+
    "\1\14\2\0\1\205\1\45\15\0\1\45\31\0\1\206"+
    "\3\0\1\206\1\45\15\0\1\45\31\0\1\207\1\14"+
    "\2\0\1\207\1\45\15\0\1\45\31\0\1\210\3\0"+
    "\1\210\1\45\15\0\1\45\31\0\1\211\1\14\2\0"+
    "\1\211\1\45\15\0\1\45\31\0\1\212\3\0\1\212"+
    "\1\45\15\0\1\45\31\0\1\213\1\14\2\0\1\213"+
    "\1\45\15\0\1\45\31\0\1\214\3\0\1\214\1\45"+
    "\15\0\1\45\31\0\1\215\1\14\2\0\1\215\1\45"+
    "\15\0\1\45\31\0\1\216\3\0\1\216\1\45\15\0"+
    "\1\45\31\0\1\217\1\14\2\0\1\217\1\45\15\0"+
    "\1\45\31\0\1\220\3\0\1\220\1\45\15\0\1\45"+
    "\31\0\1\221\1\14\2\0\1\221\1\45\15\0\1\45"+
    "\31\0\1\222\3\0\1\222\1\45\15\0\1\45\31\0"+
    "\1\223\1\14\2\0\1\223\1\45\15\0\1\45\31\0"+
    "\1\224\3\0\1\224\1\45\15\0\1\45\31\0\1\225"+
    "\1\14\2\0\1\225\1\45\15\0\1\45\31\0\1\226"+
    "\3\0\1\226\1\45\15\0\1\45\31\0\1\227\1\14"+
    "\2\0\1\227\1\45\15\0\1\45\31\0\1\230\3\0"+
    "\1\230\1\45\15\0\1\45\31\0\1\231\1\14\2\0"+
    "\1\231\1\45\15\0\1\45\31\0\1\232\3\0\1\232"+
    "\1\45\15\0\1\45\31\0\1\233\1\14\2\0\1\233"+
    "\1\45\15\0\1\45\31\0\1\234\3\0\1\234\1\45"+
    "\15\0\1\45\31\0\1\235\1\14\2\0\1\235\1\45"+
    "\15\0\1\45\31\0\1\236\3\0\1\236\1\45\15\0"+
    "\1\45\31\0\1\237\1\14\2\0\1\237\1\45\15\0"+
    "\1\45\31\0\1\240\3\0\1\240\1\45\15\0\1\45"+
    "\31\0\1\241\1\14\2\0\1\241\1\45\15\0\1\45"+
    "\31\0\1\242\3\0\1\242\1\45\15\0\1\45\31\0"+
    "\1\243\1\14\2\0\1\243\1\45\15\0\1\45\31\0"+
    "\1\244\3\0\1\244\1\45\15\0\1\45\31\0\1\245"+
    "\1\14\2\0\1\245\1\45\15\0\1\45\31\0\1\246"+
    "\3\0\1\246\1\45\15\0\1\45\31\0\1\247\1\14"+
    "\2\0\1\247\1\45\15\0\1\45\31\0\1\250\3\0"+
    "\1\250\1\45\15\0\1\45\31\0\1\251\1\14\2\0"+
    "\1\251\1\45\15\0\1\45\31\0\1\252\3\0\1\252"+
    "\1\45\15\0\1\45\31\0\1\253\1\14\2\0\1\253"+
    "\1\45\15\0\1\45\31\0\1\254\3\0\1\254\1\45"+
    "\15\0\1\45\31\0\1\255\1\14\2\0\1\255\1\45"+
    "\15\0\1\45\31\0\1\256\3\0\1\256\1\45\15\0"+
    "\1\45\31\0\1\257\1\14\2\0\1\257\1\45\15\0"+
    "\1\45\31\0\1\260\3\0\1\260\1\45\15\0\1\45"+
    "\31\0\1\261\1\14\2\0\1\261\1\45\15\0\1\45"+
    "\31\0\1\262\3\0\1\262\1\45\15\0\1\45\31\0"+
    "\1\263\1\14\2\0\1\263\1\45\15\0\1\45\31\0"+
    "\1\264\3\0\1\264\1\45\15\0\1\45\31\0\1\265"+
    "\1\14\2\0\1\265\1\45\15\0\1\45\31\0\1\266"+
    "\3\0\1\266\1\45\15\0\1\45\31\0\1\267\1\14"+
    "\2\0\1\267\1\45\15\0\1\45\31\0\1\270\3\0"+
    "\1\270\1\45\15\0\1\45\31\0\1\271\1\14\2\0"+
    "\1\271\1\45\15\0\1\45\31\0\1\272\3\0\1\272"+
    "\1\45\15\0\1\45\31\0\1\273\1\14\2\0\1\273"+
    "\1\45\15\0\1\45\31\0\1\274\3\0\1\274\1\45"+
    "\15\0\1\45\31\0\1\275\1\14\2\0\1\275\1\45"+
    "\15\0\1\45\31\0\1\276\3\0\1\276\1\45\15\0"+
    "\1\45\31\0\1\277\1\14\2\0\1\277\1\45\15\0"+
    "\1\45\31\0\1\300\3\0\1\300\1\45\15\0\1\45"+
    "\31\0\1\301\1\14\2\0\1\301\1\45\15\0\1\45"+
    "\31\0\1\302\3\0\1\302\1\45\15\0\1\45\31\0"+
    "\1\303\1\14\2\0\1\303\1\45\15\0\1\45\31\0"+
    "\1\304\3\0\1\304\1\45\15\0\1\45\31\0\1\305"+
    "\1\14\2\0\1\305\1\45\15\0\1\45\31\0\1\306"+
    "\3\0\1\306\1\45\15\0\1\45\31\0\1\307\1\14"+
    "\2\0\1\307\1\45\15\0\1\45\31\0\1\310\3\0"+
    "\1\310\1\45\15\0\1\45\31\0\1\311\1\14\2\0"+
    "\1\311\1\45\15\0\1\45\31\0\1\312\3\0\1\312"+
    "\1\45\15\0\1\45\31\0\1\313\1\14\2\0\1\313"+
    "\1\45\15\0\1\45\31\0\1\314\3\0\1\314\1\45"+
    "\15\0\1\45\31\0\1\315\1\14\2\0\1\315\1\45"+
    "\15\0\1\45\31\0\1\316\3\0\1\316\1\45\15\0"+
    "\1\45\31\0\1\317\1\14\2\0\1\317\1\45\15\0"+
    "\1\45\31\0\1\320\3\0\1\320\1\45\15\0\1\45"+
    "\31\0\1\321\1\14\2\0\1\321\1\45\15\0\1\45"+
    "\31\0\1\322\3\0\1\322\1\45\15\0\1\45\31\0"+
    "\1\323\1\14\2\0\1\323\1\45\15\0\1\45\31\0"+
    "\1\324\3\0\1\324\1\45\15\0\1\45\31\0\1\325"+
    "\1\14\2\0\1\325\1\45\15\0\1\45\31\0\1\326"+
    "\3\0\1\326\1\45\15\0\1\45\31\0\1\327\1\14"+
    "\2\0\1\327\1\45\15\0\1\45\31\0\1\330\3\0"+
    "\1\330\1\45\15\0\1\45\31\0\1\331\1\14\2\0"+
    "\1\331\1\45\15\0\1\45\31\0\1\332\3\0\1\332"+
    "\1\45\15\0\1\45\31\0\1\333\1\14\2\0\1\333"+
    "\1\45\15\0\1\45\31\0\1\334\3\0\1\334\1\45"+
    "\15\0\1\45\31\0\1\335\1\14\2\0\1\335\1\45"+
    "\15\0\1\45\31\0\1\336\3\0\1\336\1\45\15\0"+
    "\1\45\31\0\1\337\1\14\2\0\1\337\1\45\15\0"+
    "\1\45\31\0\1\340\3\0\1\340\1\45\15\0\1\45"+
    "\31\0\1\341\1\14\2\0\1\341\1\45\15\0\1\45"+
    "\31\0\1\342\3\0\1\342\1\45\15\0\1\45\31\0"+
    "\1\343\1\14\2\0\1\343\1\45\15\0\1\45\31\0"+
    "\1\344\3\0\1\344\1\45\15\0\1\45\31\0\1\345"+
    "\1\14\2\0\1\345\1\45\15\0\1\45\31\0\1\346"+
    "\3\0\1\346\1\45\15\0\1\45\31\0\1\347\1\14"+
    "\2\0\1\347\1\45\15\0\1\45\31\0\1\350\3\0"+
    "\1\350\1\45\15\0\1\45\31\0\1\351\1\14\2\0"+
    "\1\351\1\45\15\0\1\45\36\0\1\45\15\0\1\45"+
    "\31\0\2\14\2\0\1\14\1\45\15\0\1\45\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\16\1\1\11"+
    "\6\1\1\11\1\1\2\0\2\1\2\0\1\11\10\1"+
    "\2\0\3\11\1\1\7\11\2\0\1\1\1\0\11\1"+
    "\2\0\1\11\1\0\1\1\1\0\11\1\3\0\6\1"+
    "\1\11\2\0\5\1\2\0\4\1\2\0\3\1\2\0"+
    "\3\1\1\11\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  /* store a reference to the parser object */
  private PDL2Parser yyparser;

  /* constructor taking an additional parser object */
  public PDL2Lexer(java.io.Reader r, PDL2Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }

  StringBuffer string = new StringBuffer();

  public int getLineNumber()
  {
    return yyline;
  }
  
  public int getColumnNumber()
  {
    return yycolumn;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PDL2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PDL2Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 39: break;
        case 18: 
          { return yyparser.CMP_LEQ;
          }
        case 40: break;
        case 31: 
          { yyparser.yylval = new PDL2ParserVal(1);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 41: break;
        case 22: 
          { return yyparser.ASSIGN;
          }
        case 42: break;
        case 3: 
          { return (int) yycharat(0);
          }
        case 43: break;
        case 23: 
          { string.append('\t');
          }
        case 44: break;
        case 27: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                             return yyparser.PACKETREF;
          }
        case 45: break;
        case 21: 
          { return yyparser.CMP_EQ;
          }
        case 46: break;
        case 7: 
          { string.setLength(0); yybegin(STRING);
          }
        case 47: break;
        case 36: 
          { return yyparser.TK_DEFAULT;
          }
        case 48: break;
        case 11: 
          { yybegin(YYINITIAL); 
                                   yyparser.yylval = new PDL2ParserVal(string.toString());
                                   return yyparser.STRING_LITERAL;
          }
        case 49: break;
        case 1: 
          { throw new Error("[line "+yyline+":"+yycolumn+"] Illegal character <"+
                                                    yytext()+">");
          }
        case 50: break;
        case 13: 
          { yyparser.yylval = new PDL2ParserVal(yytext().substring(1));
                                   return yyparser.LABEL;
          }
        case 51: break;
        case 12: 
          { string.append('\\');
          }
        case 52: break;
        case 24: 
          { string.append('\r');
          }
        case 53: break;
        case 17: 
          { return yyparser.LSHIFT;
          }
        case 54: break;
        case 19: 
          { return yyparser.RSHIFT;
          }
        case 55: break;
        case 33: 
          { yyparser.yylval = new PDL2ParserVal(0);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 56: break;
        case 8: 
          { return yyparser.CMP_LT;
          }
        case 57: break;
        case 38: 
          { return yyparser.CAST_TO_BOOLEAN;
          }
        case 58: break;
        case 14: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseDual(yytext()));
                                   return yyparser.DUAL_INTEGER_LITERAL;
          }
        case 59: break;
        case 37: 
          { return yyparser.TK_MESSAGEID;
          }
        case 60: break;
        case 26: 
          { string.append('\"');
          }
        case 61: break;
        case 32: 
          { return yyparser.TK_CASE;
          }
        case 62: break;
        case 30: 
          { return yyparser.TK_FAIL;
          }
        case 63: break;
        case 35: 
          { return yyparser.TK_SWITCH;
          }
        case 64: break;
        case 25: 
          { string.append('\n');
          }
        case 65: break;
        case 4: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                                   return yyparser.IDENTIFIER;
          }
        case 66: break;
        case 34: 
          { return yyparser.CAST_TO_INT;
          }
        case 67: break;
        case 16: 
          { return yyparser.CMP_NEQ;
          }
        case 68: break;
        case 28: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseHex(yytext()));
                                   return yyparser.HEX_INTEGER_LITERAL;
          }
        case 69: break;
        case 6: 
          { yyparser.yylval = new PDL2ParserVal(Integer.parseInt(yytext()));
                                   return yyparser.DEC_INTEGER_LITERAL;
          }
        case 70: break;
        case 5: 
          { return yyparser.TKDOLLAR;
          }
        case 71: break;
        case 9: 
          { return yyparser.CMP_GT;
          }
        case 72: break;
        case 10: 
          { string.append( yytext() );
          }
        case 73: break;
        case 29: 
          { return yyparser.URSHIFT;
          }
        case 74: break;
        case 20: 
          { return yyparser.CMP_GEQ;
          }
        case 75: break;
        case 15: 
          { return yyparser.IF;
          }
        case 76: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
