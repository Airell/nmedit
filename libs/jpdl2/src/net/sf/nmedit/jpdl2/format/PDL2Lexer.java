/* The following code was generated by JFlex 1.4.1 on 31.01.08 17:57 */


/* JFlex example: part of Java language lexer specification */

/**
 * This class is a simple example lexer.
 */
package net.sf.nmedit.jpdl2.format;
import net.sf.nmedit.jpdl2.PDLUtils;

@SuppressWarnings({"unused", "static-access"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 31.01.08 17:57 from the specification file
 * <tt>/home/christian/dev/nmedit/libs/jpdl2/format/pdl2.jflex</tt>
 */
class PDL2Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\43"+
    "\1\42\1\20\1\10\1\20\1\20\1\0\1\35\1\37\1\5\1\20"+
    "\1\0\1\20\1\0\1\4\1\12\1\16\10\13\1\47\1\20\1\44"+
    "\1\46\1\45\1\20\1\11\3\15\1\17\2\15\24\6\1\20\1\50"+
    "\1\20\1\20\1\6\1\0\1\27\1\40\1\15\1\34\1\26\1\22"+
    "\1\33\1\6\1\21\2\6\1\30\1\32\1\36\1\41\2\6\1\24"+
    "\1\31\1\23\1\25\2\6\1\14\2\6\1\20\1\20\1\20\1\20"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0"+
    "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0"+
    "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0"+
    "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0"+
    "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6"+
    "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7"+
    "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0"+
    "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7"+
    "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7"+
    "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0"+
    "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"+
    "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"+
    "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\2\3\1\4\1\5\1\1\3\6"+
    "\4\4\1\3\1\7\1\3\1\10\1\11\2\3\1\12"+
    "\1\13\1\14\2\0\1\4\1\15\2\0\1\16\1\6"+
    "\1\17\3\4\2\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\0"+
    "\1\34\1\0\1\35\1\6\3\4\2\0\1\36\1\0"+
    "\1\2\1\0\1\35\1\6\1\4\1\37\1\4\3\0"+
    "\1\35\1\6\1\40\1\4\1\41\2\0\1\35\1\6"+
    "\1\4\2\0\1\35\1\6\1\4\2\0\1\35\1\6"+
    "\1\4\2\0\1\35\1\6\1\42\1\43\1\0\1\35"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\122\0\244\0\122\0\315"+
    "\0\315\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec"+
    "\0\u0215\0\u023e\0\122\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b"+
    "\0\u0334\0\122\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\122\0\u047c\0\315\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\122\0\122\0\122\0\u0572\0\122\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\122\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735"+
    "\0\122\0\u075e\0\u059b\0\u0787\0\u07b0\0\u07d9\0\u0802\0\315"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\315\0\u0921"+
    "\0\122\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\315\0\122\0\u0c55\0\122"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d"+
    "\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5"+
    "\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d"+
    "\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175"+
    "\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd"+
    "\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405"+
    "\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d"+
    "\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695"+
    "\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd"+
    "\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925"+
    "\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d"+
    "\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5"+
    "\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd"+
    "\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\2\10\1\15\1\10\1\7\1\16"+
    "\1\17\1\20\6\10\1\21\2\10\1\22\1\10\1\7"+
    "\2\10\1\23\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\2\3\37\31\1\32\5\31\1\33\53\0\1\5"+
    "\52\0\1\34\1\35\51\0\2\10\1\36\1\0\6\10"+
    "\1\0\14\10\1\0\1\10\1\0\2\10\15\0\1\37"+
    "\1\0\1\37\3\0\2\37\1\0\1\37\1\0\14\37"+
    "\1\0\1\37\1\0\2\37\21\0\1\40\1\0\1\41"+
    "\1\0\1\40\1\42\14\0\1\42\26\0\2\14\2\0"+
    "\1\14\44\0\1\43\1\14\2\0\1\43\1\42\14\0"+
    "\1\42\22\0\2\10\1\36\1\0\6\10\1\0\1\10"+
    "\1\44\12\10\1\0\1\10\1\0\2\10\15\0\2\10"+
    "\1\36\1\0\6\10\1\0\6\10\1\45\5\10\1\0"+
    "\1\10\1\0\2\10\15\0\2\10\1\36\1\0\6\10"+
    "\1\0\3\10\1\46\10\10\1\0\1\10\1\0\2\10"+
    "\15\0\2\10\1\36\1\0\6\10\1\0\5\10\1\47"+
    "\6\10\1\0\1\10\1\0\2\10\30\0\1\50\16\0"+
    "\1\51\56\0\1\52\46\0\1\53\1\0\1\54\47\0"+
    "\1\55\1\56\47\0\1\57\1\60\50\0\1\61\2\0"+
    "\1\31\2\0\37\31\1\0\5\31\24\0\1\62\1\63"+
    "\11\0\1\64\3\0\1\65\6\0\1\34\1\4\1\5"+
    "\46\34\5\66\1\67\43\66\6\0\1\70\1\10\1\70"+
    "\1\0\2\10\2\70\1\10\1\70\1\0\14\70\1\0"+
    "\1\70\1\0\2\70\15\0\3\37\1\0\6\37\1\0"+
    "\14\37\1\0\1\37\1\0\2\37\21\0\1\71\3\0"+
    "\1\71\1\42\14\0\1\42\26\0\2\72\1\0\3\72"+
    "\2\0\1\72\3\0\2\72\4\0\1\72\3\0\1\72"+
    "\22\0\1\73\1\14\2\0\1\73\1\42\14\0\1\42"+
    "\22\0\2\10\1\36\1\0\6\10\1\0\7\10\1\74"+
    "\4\10\1\0\1\10\1\0\2\10\15\0\2\10\1\36"+
    "\1\0\6\10\1\0\4\10\1\75\7\10\1\0\1\10"+
    "\1\0\2\10\15\0\2\10\1\36\1\0\6\10\1\0"+
    "\10\10\1\76\3\10\1\0\1\10\1\0\2\10\45\0"+
    "\1\77\53\0\1\100\54\0\1\101\3\0\5\66\1\102"+
    "\47\66\1\103\1\102\43\66\6\0\3\70\1\0\6\70"+
    "\1\0\14\70\1\0\1\70\1\0\2\70\21\0\1\104"+
    "\3\0\1\104\1\42\14\0\1\42\26\0\2\105\1\0"+
    "\3\105\2\0\1\105\3\0\2\105\4\0\1\105\3\0"+
    "\1\105\22\0\1\106\1\14\2\0\1\106\1\42\14\0"+
    "\1\42\22\0\2\10\1\36\1\0\6\10\1\0\10\10"+
    "\1\107\3\10\1\0\1\10\1\0\2\10\15\0\2\10"+
    "\1\36\1\0\6\10\1\0\5\10\1\110\6\10\1\0"+
    "\1\10\1\0\2\10\15\0\2\10\1\36\1\0\6\10"+
    "\1\0\10\10\1\111\3\10\1\0\1\10\1\0\2\10"+
    "\32\0\1\112\66\0\1\113\7\0\4\66\1\5\1\102"+
    "\43\66\12\0\1\114\3\0\1\114\1\42\14\0\1\42"+
    "\26\0\2\115\1\0\3\115\2\0\1\115\3\0\2\115"+
    "\4\0\1\115\3\0\1\115\22\0\1\116\1\14\2\0"+
    "\1\116\1\42\14\0\1\42\22\0\2\10\1\36\1\0"+
    "\6\10\1\0\5\10\1\117\6\10\1\0\1\10\1\0"+
    "\2\10\15\0\2\10\1\36\1\0\6\10\1\0\6\10"+
    "\1\120\5\10\1\0\1\10\1\0\2\10\46\0\1\121"+
    "\41\0\1\122\32\0\1\123\3\0\1\123\1\42\14\0"+
    "\1\42\26\0\2\124\1\0\3\124\2\0\1\124\3\0"+
    "\2\124\4\0\1\124\3\0\1\124\22\0\1\125\1\14"+
    "\2\0\1\125\1\42\14\0\1\42\22\0\2\10\1\36"+
    "\1\0\6\10\1\0\12\10\1\126\1\10\1\0\1\10"+
    "\1\0\2\10\35\0\1\127\34\0\1\130\3\0\1\130"+
    "\1\42\14\0\1\42\26\0\2\131\1\0\3\131\2\0"+
    "\1\131\3\0\2\131\4\0\1\131\3\0\1\131\22\0"+
    "\1\132\1\14\2\0\1\132\1\42\14\0\1\42\22\0"+
    "\2\10\1\36\1\0\6\10\1\0\5\10\1\133\6\10"+
    "\1\0\1\10\1\0\2\10\36\0\1\134\33\0\1\135"+
    "\3\0\1\135\1\42\14\0\1\42\26\0\2\136\1\0"+
    "\3\136\2\0\1\136\3\0\2\136\4\0\1\136\3\0"+
    "\1\136\22\0\1\137\1\14\2\0\1\137\1\42\14\0"+
    "\1\42\22\0\2\10\1\36\1\0\6\10\1\0\1\140"+
    "\13\10\1\0\1\10\1\0\2\10\45\0\1\141\24\0"+
    "\1\142\3\0\1\142\1\42\14\0\1\42\26\0\2\143"+
    "\1\0\3\143\2\0\1\143\3\0\2\143\4\0\1\143"+
    "\3\0\1\143\22\0\1\144\1\14\2\0\1\144\1\42"+
    "\14\0\1\42\22\0\2\10\1\36\1\0\6\10\1\0"+
    "\13\10\1\145\1\0\1\10\1\0\2\10\46\0\1\146"+
    "\23\0\1\147\3\0\1\147\1\42\14\0\1\42\26\0"+
    "\2\150\1\0\3\150\2\0\1\150\3\0\2\150\4\0"+
    "\1\150\3\0\1\150\22\0\1\151\1\14\2\0\1\151"+
    "\1\42\14\0\1\42\26\0\1\152\3\0\1\152\1\42"+
    "\14\0\1\42\26\0\1\153\1\14\2\0\1\153\1\42"+
    "\14\0\1\42\26\0\1\154\3\0\1\154\1\42\14\0"+
    "\1\42\26\0\1\155\1\14\2\0\1\155\1\42\14\0"+
    "\1\42\26\0\1\156\3\0\1\156\1\42\14\0\1\42"+
    "\26\0\1\157\1\14\2\0\1\157\1\42\14\0\1\42"+
    "\26\0\1\160\3\0\1\160\1\42\14\0\1\42\26\0"+
    "\1\161\1\14\2\0\1\161\1\42\14\0\1\42\26\0"+
    "\1\162\3\0\1\162\1\42\14\0\1\42\26\0\1\163"+
    "\1\14\2\0\1\163\1\42\14\0\1\42\26\0\1\164"+
    "\3\0\1\164\1\42\14\0\1\42\26\0\1\165\1\14"+
    "\2\0\1\165\1\42\14\0\1\42\26\0\1\166\3\0"+
    "\1\166\1\42\14\0\1\42\26\0\1\167\1\14\2\0"+
    "\1\167\1\42\14\0\1\42\26\0\1\170\3\0\1\170"+
    "\1\42\14\0\1\42\26\0\1\171\1\14\2\0\1\171"+
    "\1\42\14\0\1\42\26\0\1\172\3\0\1\172\1\42"+
    "\14\0\1\42\26\0\1\173\1\14\2\0\1\173\1\42"+
    "\14\0\1\42\26\0\1\174\3\0\1\174\1\42\14\0"+
    "\1\42\26\0\1\175\1\14\2\0\1\175\1\42\14\0"+
    "\1\42\26\0\1\176\3\0\1\176\1\42\14\0\1\42"+
    "\26\0\1\177\1\14\2\0\1\177\1\42\14\0\1\42"+
    "\26\0\1\200\3\0\1\200\1\42\14\0\1\42\26\0"+
    "\1\201\1\14\2\0\1\201\1\42\14\0\1\42\26\0"+
    "\1\202\3\0\1\202\1\42\14\0\1\42\26\0\1\203"+
    "\1\14\2\0\1\203\1\42\14\0\1\42\26\0\1\204"+
    "\3\0\1\204\1\42\14\0\1\42\26\0\1\205\1\14"+
    "\2\0\1\205\1\42\14\0\1\42\26\0\1\206\3\0"+
    "\1\206\1\42\14\0\1\42\26\0\1\207\1\14\2\0"+
    "\1\207\1\42\14\0\1\42\26\0\1\210\3\0\1\210"+
    "\1\42\14\0\1\42\26\0\1\211\1\14\2\0\1\211"+
    "\1\42\14\0\1\42\26\0\1\212\3\0\1\212\1\42"+
    "\14\0\1\42\26\0\1\213\1\14\2\0\1\213\1\42"+
    "\14\0\1\42\26\0\1\214\3\0\1\214\1\42\14\0"+
    "\1\42\26\0\1\215\1\14\2\0\1\215\1\42\14\0"+
    "\1\42\26\0\1\216\3\0\1\216\1\42\14\0\1\42"+
    "\26\0\1\217\1\14\2\0\1\217\1\42\14\0\1\42"+
    "\26\0\1\220\3\0\1\220\1\42\14\0\1\42\26\0"+
    "\1\221\1\14\2\0\1\221\1\42\14\0\1\42\26\0"+
    "\1\222\3\0\1\222\1\42\14\0\1\42\26\0\1\223"+
    "\1\14\2\0\1\223\1\42\14\0\1\42\26\0\1\224"+
    "\3\0\1\224\1\42\14\0\1\42\26\0\1\225\1\14"+
    "\2\0\1\225\1\42\14\0\1\42\26\0\1\226\3\0"+
    "\1\226\1\42\14\0\1\42\26\0\1\227\1\14\2\0"+
    "\1\227\1\42\14\0\1\42\26\0\1\230\3\0\1\230"+
    "\1\42\14\0\1\42\26\0\1\231\1\14\2\0\1\231"+
    "\1\42\14\0\1\42\26\0\1\232\3\0\1\232\1\42"+
    "\14\0\1\42\26\0\1\233\1\14\2\0\1\233\1\42"+
    "\14\0\1\42\26\0\1\234\3\0\1\234\1\42\14\0"+
    "\1\42\26\0\1\235\1\14\2\0\1\235\1\42\14\0"+
    "\1\42\26\0\1\236\3\0\1\236\1\42\14\0\1\42"+
    "\26\0\1\237\1\14\2\0\1\237\1\42\14\0\1\42"+
    "\26\0\1\240\3\0\1\240\1\42\14\0\1\42\26\0"+
    "\1\241\1\14\2\0\1\241\1\42\14\0\1\42\26\0"+
    "\1\242\3\0\1\242\1\42\14\0\1\42\26\0\1\243"+
    "\1\14\2\0\1\243\1\42\14\0\1\42\26\0\1\244"+
    "\3\0\1\244\1\42\14\0\1\42\26\0\1\245\1\14"+
    "\2\0\1\245\1\42\14\0\1\42\26\0\1\246\3\0"+
    "\1\246\1\42\14\0\1\42\26\0\1\247\1\14\2\0"+
    "\1\247\1\42\14\0\1\42\26\0\1\250\3\0\1\250"+
    "\1\42\14\0\1\42\26\0\1\251\1\14\2\0\1\251"+
    "\1\42\14\0\1\42\26\0\1\252\3\0\1\252\1\42"+
    "\14\0\1\42\26\0\1\253\1\14\2\0\1\253\1\42"+
    "\14\0\1\42\26\0\1\254\3\0\1\254\1\42\14\0"+
    "\1\42\26\0\1\255\1\14\2\0\1\255\1\42\14\0"+
    "\1\42\26\0\1\256\3\0\1\256\1\42\14\0\1\42"+
    "\26\0\1\257\1\14\2\0\1\257\1\42\14\0\1\42"+
    "\26\0\1\260\3\0\1\260\1\42\14\0\1\42\26\0"+
    "\1\261\1\14\2\0\1\261\1\42\14\0\1\42\26\0"+
    "\1\262\3\0\1\262\1\42\14\0\1\42\26\0\1\263"+
    "\1\14\2\0\1\263\1\42\14\0\1\42\26\0\1\264"+
    "\3\0\1\264\1\42\14\0\1\42\26\0\1\265\1\14"+
    "\2\0\1\265\1\42\14\0\1\42\26\0\1\266\3\0"+
    "\1\266\1\42\14\0\1\42\26\0\1\267\1\14\2\0"+
    "\1\267\1\42\14\0\1\42\26\0\1\270\3\0\1\270"+
    "\1\42\14\0\1\42\26\0\1\271\1\14\2\0\1\271"+
    "\1\42\14\0\1\42\26\0\1\272\3\0\1\272\1\42"+
    "\14\0\1\42\26\0\1\273\1\14\2\0\1\273\1\42"+
    "\14\0\1\42\26\0\1\274\3\0\1\274\1\42\14\0"+
    "\1\42\26\0\1\275\1\14\2\0\1\275\1\42\14\0"+
    "\1\42\26\0\1\276\3\0\1\276\1\42\14\0\1\42"+
    "\26\0\1\277\1\14\2\0\1\277\1\42\14\0\1\42"+
    "\26\0\1\300\3\0\1\300\1\42\14\0\1\42\26\0"+
    "\1\301\1\14\2\0\1\301\1\42\14\0\1\42\26\0"+
    "\1\302\3\0\1\302\1\42\14\0\1\42\26\0\1\303"+
    "\1\14\2\0\1\303\1\42\14\0\1\42\26\0\1\304"+
    "\3\0\1\304\1\42\14\0\1\42\26\0\1\305\1\14"+
    "\2\0\1\305\1\42\14\0\1\42\26\0\1\306\3\0"+
    "\1\306\1\42\14\0\1\42\26\0\1\307\1\14\2\0"+
    "\1\307\1\42\14\0\1\42\26\0\1\310\3\0\1\310"+
    "\1\42\14\0\1\42\26\0\1\311\1\14\2\0\1\311"+
    "\1\42\14\0\1\42\26\0\1\312\3\0\1\312\1\42"+
    "\14\0\1\42\26\0\1\313\1\14\2\0\1\313\1\42"+
    "\14\0\1\42\26\0\1\314\3\0\1\314\1\42\14\0"+
    "\1\42\26\0\1\315\1\14\2\0\1\315\1\42\14\0"+
    "\1\42\26\0\1\316\3\0\1\316\1\42\14\0\1\42"+
    "\26\0\1\317\1\14\2\0\1\317\1\42\14\0\1\42"+
    "\26\0\1\320\3\0\1\320\1\42\14\0\1\42\26\0"+
    "\1\321\1\14\2\0\1\321\1\42\14\0\1\42\26\0"+
    "\1\322\3\0\1\322\1\42\14\0\1\42\26\0\1\323"+
    "\1\14\2\0\1\323\1\42\14\0\1\42\26\0\1\324"+
    "\3\0\1\324\1\42\14\0\1\42\26\0\1\325\1\14"+
    "\2\0\1\325\1\42\14\0\1\42\26\0\1\326\3\0"+
    "\1\326\1\42\14\0\1\42\26\0\1\327\1\14\2\0"+
    "\1\327\1\42\14\0\1\42\33\0\1\42\14\0\1\42"+
    "\26\0\2\14\2\0\1\14\1\42\14\0\1\42\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7749];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\13\1\1\11"+
    "\6\1\1\11\1\1\2\0\2\1\2\0\1\11\5\1"+
    "\2\0\3\11\1\1\10\11\2\0\1\1\1\0\5\1"+
    "\2\0\1\11\1\0\1\1\1\0\5\1\3\0\4\1"+
    "\1\11\2\0\3\1\2\0\3\1\2\0\3\1\2\0"+
    "\3\1\1\11\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  /* store a reference to the parser object */
  private PDL2Parser yyparser;

  /* constructor taking an additional parser object */
  public PDL2Lexer(java.io.Reader r, PDL2Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }

  StringBuffer string = new StringBuffer();

  public int getLineNumber()
  {
    return yyline;
  }
  
  public int getColumnNumber()
  {
    return yycolumn;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PDL2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PDL2Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1760) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                                   return yyparser.IDENTIFIER;
          }
        case 36: break;
        case 26: 
          { string.append('\n');
          }
        case 37: break;
        case 8: 
          { return yyparser.CMP_LT;
          }
        case 38: break;
        case 29: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseHex(yytext()));
                                   return yyparser.HEX_INTEGER_LITERAL;
          }
        case 39: break;
        case 6: 
          { yyparser.yylval = new PDL2ParserVal(Integer.parseInt(yytext()));
                                   return yyparser.DEC_INTEGER_LITERAL;
          }
        case 40: break;
        case 1: 
          { throw new Error("[line "+yyline+":"+yycolumn+"] Illegal character <"+
                                                    yytext()+">");
          }
        case 41: break;
        case 22: 
          { return yyparser.CMP_EQ;
          }
        case 42: break;
        case 10: 
          { string.append( yytext() );
          }
        case 43: break;
        case 20: 
          { return yyparser.CMP_GEQ;
          }
        case 44: break;
        case 23: 
          { return yyparser.ASSIGN;
          }
        case 45: break;
        case 16: 
          { return yyparser.CMP_NEQ;
          }
        case 46: break;
        case 3: 
          { return (int) yycharat(0);
          }
        case 47: break;
        case 9: 
          { return yyparser.CMP_GT;
          }
        case 48: break;
        case 19: 
          { return yyparser.RSHIFT;
          }
        case 49: break;
        case 12: 
          { string.append('\\');
          }
        case 50: break;
        case 30: 
          { return yyparser.URSHIFT;
          }
        case 51: break;
        case 7: 
          { string.setLength(0); yybegin(STRING);
          }
        case 52: break;
        case 11: 
          { yybegin(YYINITIAL); 
                                   yyparser.yylval = new PDL2ParserVal(string.toString());
                                   return yyparser.STRING_LITERAL;
          }
        case 53: break;
        case 21: 
          { return yyparser.RARROW;
          }
        case 54: break;
        case 25: 
          { string.append('\r');
          }
        case 55: break;
        case 14: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseDual(yytext()));
                                   return yyparser.DUAL_INTEGER_LITERAL;
          }
        case 56: break;
        case 17: 
          { return yyparser.LSHIFT;
          }
        case 57: break;
        case 15: 
          { return yyparser.IF;
          }
        case 58: break;
        case 34: 
          { return yyparser.TK_MESSAGEID;
          }
        case 59: break;
        case 27: 
          { string.append('\"');
          }
        case 60: break;
        case 28: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                             return yyparser.PACKETREF;
          }
        case 61: break;
        case 33: 
          { return yyparser.CAST_TO_INT;
          }
        case 62: break;
        case 31: 
          { yyparser.yylval = new PDL2ParserVal(1);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 63: break;
        case 13: 
          { yyparser.yylval = new PDL2ParserVal(yytext().substring(1));
                                   return yyparser.LABEL;
          }
        case 64: break;
        case 32: 
          { yyparser.yylval = new PDL2ParserVal(0);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 65: break;
        case 35: 
          { return yyparser.CAST_TO_BOOLEAN;
          }
        case 66: break;
        case 18: 
          { return yyparser.CMP_LEQ;
          }
        case 67: break;
        case 24: 
          { string.append('\t');
          }
        case 68: break;
        case 5: 
          { return yyparser.TKDOLLAR;
          }
        case 69: break;
        case 2: 
          { /* ignore */
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
