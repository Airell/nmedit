/* The following code was generated by JFlex 1.4.1 on 21.02.08 01:15 */


/* JFlex example: part of Java language lexer specification */

/**
 * This class is a simple example lexer.
 */
package net.sf.nmedit.jpdl2.format;
import net.sf.nmedit.jpdl2.utils.PDLUtils;

@SuppressWarnings({"unused", "static-access"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 21.02.08 01:15 from the specification file
 * <tt>/home/christian/dev/nmedit/libs/jpdl2/format/pdl2.jflex</tt>
 */
class PDL2Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\56"+
    "\1\46\1\20\1\10\1\51\1\52\1\0\1\41\1\43\1\5\1\47"+
    "\1\0\1\50\1\0\1\4\1\12\1\16\10\13\1\62\1\20\1\57"+
    "\1\61\1\60\1\63\1\11\3\15\1\17\2\15\2\6\1\34\21\6"+
    "\1\20\1\64\1\20\1\54\1\6\1\0\1\27\1\44\1\37\1\35"+
    "\1\26\1\22\1\33\1\40\1\21\2\6\1\30\1\32\1\42\1\45"+
    "\2\6\1\24\1\31\1\23\1\25\1\6\1\36\1\14\2\6\1\20"+
    "\1\53\1\20\1\55\41\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6"+
    "\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7"+
    "\5\0\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\1\0\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6"+
    "\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6"+
    "\5\0\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6"+
    "\16\7\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0"+
    "\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7"+
    "\2\0\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\11\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\15\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0"+
    "\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7"+
    "\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7"+
    "\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6"+
    "\4\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0"+
    "\44\7\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0"+
    "\7\7\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6"+
    "\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6"+
    "\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7"+
    "\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6"+
    "\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0"+
    "\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0"+
    "\22\6\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0"+
    "\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6"+
    "\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\3\7\1\10\7\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\10\1\25\1\26\1\27\1\30\2\0\1\5\1\31"+
    "\2\0\1\32\1\7\1\33\6\5\2\0\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\0\1\47\1\0\1\50\1\7\7\5\2\0"+
    "\1\51\1\0\1\2\1\0\1\50\1\7\1\52\1\5"+
    "\1\53\3\5\1\54\3\0\1\50\1\7\1\55\3\5"+
    "\1\56\2\0\1\50\1\7\1\57\2\5\2\0\1\50"+
    "\1\7\1\5\1\60\2\0\1\50\1\7\1\5\2\0"+
    "\1\50\1\7\1\61\1\62\1\0\1\50\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\152\0\324\0\152\0\u0109"+
    "\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd\0\152\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\152\0\u04c3\0\152\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\152\0\u066b\0\u0109"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\152\0\152\0\152\0\u0848\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\152\0\u0b98\0\u087d\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0109\0\u0c6c\0\u0109\0\u0ca1\0\u0cd6\0\u0d0b\0\u0109\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0109\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\152\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0109\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u0109\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u0109"+
    "\0\152\0\u130c\0\152\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad"+
    "\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5"+
    "\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d"+
    "\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\2\10\1\15\1\10\1\16\1\17"+
    "\1\20\1\21\5\10\1\22\1\23\2\10\1\24\1\10"+
    "\1\25\1\10\1\26\1\10\1\16\2\10\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\3\1\45\2\3\43\45"+
    "\1\46\15\45\1\47\67\0\1\5\66\0\1\50\1\51"+
    "\65\0\2\10\1\52\1\0\6\10\1\0\20\10\1\0"+
    "\1\10\1\0\2\10\25\0\1\53\1\0\1\53\3\0"+
    "\2\53\1\0\1\53\1\0\20\53\1\0\1\53\1\0"+
    "\2\53\31\0\1\54\1\0\1\55\1\0\1\54\1\56"+
    "\15\0\1\56\41\0\2\14\2\0\1\14\60\0\1\57"+
    "\1\14\2\0\1\57\1\56\15\0\1\56\35\0\2\10"+
    "\1\52\1\0\6\10\1\0\1\10\1\60\16\10\1\0"+
    "\1\10\1\0\2\10\25\0\2\10\1\52\1\0\6\10"+
    "\1\0\6\10\1\61\11\10\1\0\1\10\1\0\2\10"+
    "\25\0\2\10\1\52\1\0\6\10\1\0\3\10\1\62"+
    "\14\10\1\0\1\10\1\0\2\10\25\0\2\10\1\52"+
    "\1\0\6\10\1\0\15\10\1\63\2\10\1\0\1\10"+
    "\1\0\2\10\25\0\2\10\1\52\1\0\6\10\1\0"+
    "\5\10\1\64\12\10\1\0\1\10\1\0\2\10\25\0"+
    "\2\10\1\52\1\0\6\10\1\0\5\10\1\65\12\10"+
    "\1\0\1\10\1\0\2\10\25\0\2\10\1\52\1\0"+
    "\6\10\1\0\6\10\1\66\11\10\1\0\1\10\1\0"+
    "\2\10\40\0\1\67\22\0\1\70\101\0\1\71\62\0"+
    "\1\72\1\0\1\73\63\0\1\74\1\75\64\0\1\76"+
    "\64\0\1\77\3\0\1\45\2\0\43\45\1\0\15\45"+
    "\24\0\1\100\1\101\15\0\1\102\3\0\1\103\16\0"+
    "\1\50\1\4\1\5\62\50\5\104\1\105\57\104\6\0"+
    "\1\106\1\10\1\106\1\0\2\10\2\106\1\10\1\106"+
    "\1\0\20\106\1\0\1\106\1\0\2\106\25\0\3\53"+
    "\1\0\6\53\1\0\20\53\1\0\1\53\1\0\2\53"+
    "\31\0\1\107\3\0\1\107\1\56\15\0\1\56\41\0"+
    "\2\110\1\0\3\110\2\0\1\110\3\0\2\110\5\0"+
    "\1\110\1\0\1\110\4\0\1\110\32\0\1\111\1\14"+
    "\2\0\1\111\1\56\15\0\1\56\35\0\2\10\1\52"+
    "\1\0\6\10\1\0\1\112\6\10\1\113\10\10\1\0"+
    "\1\10\1\0\2\10\25\0\2\10\1\52\1\0\6\10"+
    "\1\0\4\10\1\114\13\10\1\0\1\10\1\0\2\10"+
    "\25\0\2\10\1\52\1\0\6\10\1\0\1\115\17\10"+
    "\1\0\1\10\1\0\2\10\25\0\2\10\1\52\1\0"+
    "\6\10\1\0\10\10\1\116\7\10\1\0\1\10\1\0"+
    "\2\10\25\0\2\10\1\52\1\0\6\10\1\0\1\10"+
    "\1\117\16\10\1\0\1\10\1\0\2\10\25\0\2\10"+
    "\1\52\1\0\6\10\1\0\10\10\1\120\7\10\1\0"+
    "\1\10\1\0\2\10\61\0\1\121\67\0\1\122\77\0"+
    "\1\123\4\0\5\104\1\124\63\104\1\125\1\124\57\104"+
    "\6\0\3\106\1\0\6\106\1\0\20\106\1\0\1\106"+
    "\1\0\2\106\31\0\1\126\3\0\1\126\1\56\15\0"+
    "\1\56\41\0\2\127\1\0\3\127\2\0\1\127\3\0"+
    "\2\127\5\0\1\127\1\0\1\127\4\0\1\127\32\0"+
    "\1\130\1\14\2\0\1\130\1\56\15\0\1\56\35\0"+
    "\2\10\1\52\1\0\6\10\1\0\7\10\1\131\10\10"+
    "\1\0\1\10\1\0\2\10\25\0\2\10\1\52\1\0"+
    "\6\10\1\0\10\10\1\132\7\10\1\0\1\10\1\0"+
    "\2\10\25\0\2\10\1\52\1\0\6\10\1\0\5\10"+
    "\1\133\12\10\1\0\1\10\1\0\2\10\25\0\2\10"+
    "\1\52\1\0\6\10\1\0\2\10\1\134\15\10\1\0"+
    "\1\10\1\0\2\10\25\0\2\10\1\52\1\0\6\10"+
    "\1\0\10\10\1\135\7\10\1\0\1\10\1\0\2\10"+
    "\25\0\2\10\1\52\1\0\6\10\1\0\6\10\1\136"+
    "\11\10\1\0\1\10\1\0\2\10\25\0\2\10\1\52"+
    "\1\0\6\10\1\0\5\10\1\137\12\10\1\0\1\10"+
    "\1\0\2\10\42\0\1\140\106\0\1\141\17\0\4\104"+
    "\1\5\1\124\57\104\12\0\1\142\3\0\1\142\1\56"+
    "\15\0\1\56\41\0\2\143\1\0\3\143\2\0\1\143"+
    "\3\0\2\143\5\0\1\143\1\0\1\143\4\0\1\143"+
    "\32\0\1\144\1\14\2\0\1\144\1\56\15\0\1\56"+
    "\35\0\2\10\1\52\1\0\6\10\1\0\5\10\1\145"+
    "\12\10\1\0\1\10\1\0\2\10\25\0\2\10\1\52"+
    "\1\0\6\10\1\0\16\10\1\146\1\10\1\0\1\10"+
    "\1\0\2\10\25\0\2\10\1\52\1\0\6\10\1\0"+
    "\6\10\1\147\11\10\1\0\1\10\1\0\2\10\25\0"+
    "\2\10\1\52\1\0\6\10\1\0\4\10\1\150\13\10"+
    "\1\0\1\10\1\0\2\10\62\0\1\151\51\0\1\152"+
    "\46\0\1\153\3\0\1\153\1\56\15\0\1\56\41\0"+
    "\2\154\1\0\3\154\2\0\1\154\3\0\2\154\5\0"+
    "\1\154\1\0\1\154\4\0\1\154\32\0\1\155\1\14"+
    "\2\0\1\155\1\56\15\0\1\56\35\0\2\10\1\52"+
    "\1\0\6\10\1\0\17\10\1\156\1\0\1\10\1\0"+
    "\2\10\25\0\2\10\1\52\1\0\6\10\1\0\12\10"+
    "\1\157\5\10\1\0\1\10\1\0\2\10\25\0\2\10"+
    "\1\52\1\0\6\10\1\0\7\10\1\160\10\10\1\0"+
    "\1\10\1\0\2\10\45\0\1\161\50\0\1\162\3\0"+
    "\1\162\1\56\15\0\1\56\41\0\2\163\1\0\3\163"+
    "\2\0\1\163\3\0\2\163\5\0\1\163\1\0\1\163"+
    "\4\0\1\163\32\0\1\164\1\14\2\0\1\164\1\56"+
    "\15\0\1\56\35\0\2\10\1\52\1\0\6\10\1\0"+
    "\5\10\1\165\12\10\1\0\1\10\1\0\2\10\25\0"+
    "\2\10\1\52\1\0\6\10\1\0\2\10\1\166\15\10"+
    "\1\0\1\10\1\0\2\10\46\0\1\167\47\0\1\170"+
    "\3\0\1\170\1\56\15\0\1\56\41\0\2\171\1\0"+
    "\3\171\2\0\1\171\3\0\2\171\5\0\1\171\1\0"+
    "\1\171\4\0\1\171\32\0\1\172\1\14\2\0\1\172"+
    "\1\56\15\0\1\56\35\0\2\10\1\52\1\0\6\10"+
    "\1\0\13\10\1\173\4\10\1\0\1\10\1\0\2\10"+
    "\61\0\1\174\34\0\1\175\3\0\1\175\1\56\15\0"+
    "\1\56\41\0\2\176\1\0\3\176\2\0\1\176\3\0"+
    "\2\176\5\0\1\176\1\0\1\176\4\0\1\176\32\0"+
    "\1\177\1\14\2\0\1\177\1\56\15\0\1\56\35\0"+
    "\2\10\1\52\1\0\6\10\1\0\14\10\1\200\3\10"+
    "\1\0\1\10\1\0\2\10\62\0\1\201\33\0\1\202"+
    "\3\0\1\202\1\56\15\0\1\56\41\0\2\203\1\0"+
    "\3\203\2\0\1\203\3\0\2\203\5\0\1\203\1\0"+
    "\1\203\4\0\1\203\32\0\1\204\1\14\2\0\1\204"+
    "\1\56\15\0\1\56\41\0\1\205\3\0\1\205\1\56"+
    "\15\0\1\56\41\0\1\206\1\14\2\0\1\206\1\56"+
    "\15\0\1\56\41\0\1\207\3\0\1\207\1\56\15\0"+
    "\1\56\41\0\1\210\1\14\2\0\1\210\1\56\15\0"+
    "\1\56\41\0\1\211\3\0\1\211\1\56\15\0\1\56"+
    "\41\0\1\212\1\14\2\0\1\212\1\56\15\0\1\56"+
    "\41\0\1\213\3\0\1\213\1\56\15\0\1\56\41\0"+
    "\1\214\1\14\2\0\1\214\1\56\15\0\1\56\41\0"+
    "\1\215\3\0\1\215\1\56\15\0\1\56\41\0\1\216"+
    "\1\14\2\0\1\216\1\56\15\0\1\56\41\0\1\217"+
    "\3\0\1\217\1\56\15\0\1\56\41\0\1\220\1\14"+
    "\2\0\1\220\1\56\15\0\1\56\41\0\1\221\3\0"+
    "\1\221\1\56\15\0\1\56\41\0\1\222\1\14\2\0"+
    "\1\222\1\56\15\0\1\56\41\0\1\223\3\0\1\223"+
    "\1\56\15\0\1\56\41\0\1\224\1\14\2\0\1\224"+
    "\1\56\15\0\1\56\41\0\1\225\3\0\1\225\1\56"+
    "\15\0\1\56\41\0\1\226\1\14\2\0\1\226\1\56"+
    "\15\0\1\56\41\0\1\227\3\0\1\227\1\56\15\0"+
    "\1\56\41\0\1\230\1\14\2\0\1\230\1\56\15\0"+
    "\1\56\41\0\1\231\3\0\1\231\1\56\15\0\1\56"+
    "\41\0\1\232\1\14\2\0\1\232\1\56\15\0\1\56"+
    "\41\0\1\233\3\0\1\233\1\56\15\0\1\56\41\0"+
    "\1\234\1\14\2\0\1\234\1\56\15\0\1\56\41\0"+
    "\1\235\3\0\1\235\1\56\15\0\1\56\41\0\1\236"+
    "\1\14\2\0\1\236\1\56\15\0\1\56\41\0\1\237"+
    "\3\0\1\237\1\56\15\0\1\56\41\0\1\240\1\14"+
    "\2\0\1\240\1\56\15\0\1\56\41\0\1\241\3\0"+
    "\1\241\1\56\15\0\1\56\41\0\1\242\1\14\2\0"+
    "\1\242\1\56\15\0\1\56\41\0\1\243\3\0\1\243"+
    "\1\56\15\0\1\56\41\0\1\244\1\14\2\0\1\244"+
    "\1\56\15\0\1\56\41\0\1\245\3\0\1\245\1\56"+
    "\15\0\1\56\41\0\1\246\1\14\2\0\1\246\1\56"+
    "\15\0\1\56\41\0\1\247\3\0\1\247\1\56\15\0"+
    "\1\56\41\0\1\250\1\14\2\0\1\250\1\56\15\0"+
    "\1\56\41\0\1\251\3\0\1\251\1\56\15\0\1\56"+
    "\41\0\1\252\1\14\2\0\1\252\1\56\15\0\1\56"+
    "\41\0\1\253\3\0\1\253\1\56\15\0\1\56\41\0"+
    "\1\254\1\14\2\0\1\254\1\56\15\0\1\56\41\0"+
    "\1\255\3\0\1\255\1\56\15\0\1\56\41\0\1\256"+
    "\1\14\2\0\1\256\1\56\15\0\1\56\41\0\1\257"+
    "\3\0\1\257\1\56\15\0\1\56\41\0\1\260\1\14"+
    "\2\0\1\260\1\56\15\0\1\56\41\0\1\261\3\0"+
    "\1\261\1\56\15\0\1\56\41\0\1\262\1\14\2\0"+
    "\1\262\1\56\15\0\1\56\41\0\1\263\3\0\1\263"+
    "\1\56\15\0\1\56\41\0\1\264\1\14\2\0\1\264"+
    "\1\56\15\0\1\56\41\0\1\265\3\0\1\265\1\56"+
    "\15\0\1\56\41\0\1\266\1\14\2\0\1\266\1\56"+
    "\15\0\1\56\41\0\1\267\3\0\1\267\1\56\15\0"+
    "\1\56\41\0\1\270\1\14\2\0\1\270\1\56\15\0"+
    "\1\56\41\0\1\271\3\0\1\271\1\56\15\0\1\56"+
    "\41\0\1\272\1\14\2\0\1\272\1\56\15\0\1\56"+
    "\41\0\1\273\3\0\1\273\1\56\15\0\1\56\41\0"+
    "\1\274\1\14\2\0\1\274\1\56\15\0\1\56\41\0"+
    "\1\275\3\0\1\275\1\56\15\0\1\56\41\0\1\276"+
    "\1\14\2\0\1\276\1\56\15\0\1\56\41\0\1\277"+
    "\3\0\1\277\1\56\15\0\1\56\41\0\1\300\1\14"+
    "\2\0\1\300\1\56\15\0\1\56\41\0\1\301\3\0"+
    "\1\301\1\56\15\0\1\56\41\0\1\302\1\14\2\0"+
    "\1\302\1\56\15\0\1\56\41\0\1\303\3\0\1\303"+
    "\1\56\15\0\1\56\41\0\1\304\1\14\2\0\1\304"+
    "\1\56\15\0\1\56\41\0\1\305\3\0\1\305\1\56"+
    "\15\0\1\56\41\0\1\306\1\14\2\0\1\306\1\56"+
    "\15\0\1\56\41\0\1\307\3\0\1\307\1\56\15\0"+
    "\1\56\41\0\1\310\1\14\2\0\1\310\1\56\15\0"+
    "\1\56\41\0\1\311\3\0\1\311\1\56\15\0\1\56"+
    "\41\0\1\312\1\14\2\0\1\312\1\56\15\0\1\56"+
    "\41\0\1\313\3\0\1\313\1\56\15\0\1\56\41\0"+
    "\1\314\1\14\2\0\1\314\1\56\15\0\1\56\41\0"+
    "\1\315\3\0\1\315\1\56\15\0\1\56\41\0\1\316"+
    "\1\14\2\0\1\316\1\56\15\0\1\56\41\0\1\317"+
    "\3\0\1\317\1\56\15\0\1\56\41\0\1\320\1\14"+
    "\2\0\1\320\1\56\15\0\1\56\41\0\1\321\3\0"+
    "\1\321\1\56\15\0\1\56\41\0\1\322\1\14\2\0"+
    "\1\322\1\56\15\0\1\56\41\0\1\323\3\0\1\323"+
    "\1\56\15\0\1\56\41\0\1\324\1\14\2\0\1\324"+
    "\1\56\15\0\1\56\41\0\1\325\3\0\1\325\1\56"+
    "\15\0\1\56\41\0\1\326\1\14\2\0\1\326\1\56"+
    "\15\0\1\56\41\0\1\327\3\0\1\327\1\56\15\0"+
    "\1\56\41\0\1\330\1\14\2\0\1\330\1\56\15\0"+
    "\1\56\41\0\1\331\3\0\1\331\1\56\15\0\1\56"+
    "\41\0\1\332\1\14\2\0\1\332\1\56\15\0\1\56"+
    "\41\0\1\333\3\0\1\333\1\56\15\0\1\56\41\0"+
    "\1\334\1\14\2\0\1\334\1\56\15\0\1\56\41\0"+
    "\1\335\3\0\1\335\1\56\15\0\1\56\41\0\1\336"+
    "\1\14\2\0\1\336\1\56\15\0\1\56\41\0\1\337"+
    "\3\0\1\337\1\56\15\0\1\56\41\0\1\340\1\14"+
    "\2\0\1\340\1\56\15\0\1\56\41\0\1\341\3\0"+
    "\1\341\1\56\15\0\1\56\41\0\1\342\1\14\2\0"+
    "\1\342\1\56\15\0\1\56\41\0\1\343\3\0\1\343"+
    "\1\56\15\0\1\56\41\0\1\344\1\14\2\0\1\344"+
    "\1\56\15\0\1\56\41\0\1\345\3\0\1\345\1\56"+
    "\15\0\1\56\41\0\1\346\1\14\2\0\1\346\1\56"+
    "\15\0\1\56\41\0\1\347\3\0\1\347\1\56\15\0"+
    "\1\56\41\0\1\350\1\14\2\0\1\350\1\56\15\0"+
    "\1\56\41\0\1\351\3\0\1\351\1\56\15\0\1\56"+
    "\41\0\1\352\1\14\2\0\1\352\1\56\15\0\1\56"+
    "\41\0\1\353\3\0\1\353\1\56\15\0\1\56\41\0"+
    "\1\354\1\14\2\0\1\354\1\56\15\0\1\56\41\0"+
    "\1\355\3\0\1\355\1\56\15\0\1\56\41\0\1\356"+
    "\1\14\2\0\1\356\1\56\15\0\1\56\41\0\1\357"+
    "\3\0\1\357\1\56\15\0\1\56\41\0\1\360\1\14"+
    "\2\0\1\360\1\56\15\0\1\56\41\0\1\361\3\0"+
    "\1\361\1\56\15\0\1\56\41\0\1\362\1\14\2\0"+
    "\1\362\1\56\15\0\1\56\46\0\1\56\15\0\1\56"+
    "\41\0\2\14\2\0\1\14\1\56\15\0\1\56\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\6\1\1\11"+
    "\10\1\10\11\5\1\1\11\1\1\1\11\1\1\2\0"+
    "\2\1\2\0\1\11\10\1\2\0\3\11\1\1\7\11"+
    "\2\0\1\1\1\0\11\1\2\0\1\11\1\0\1\1"+
    "\1\0\11\1\3\0\6\1\1\11\2\0\5\1\2\0"+
    "\4\1\2\0\3\1\2\0\3\1\1\11\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  /* store a reference to the parser object */
  private PDL2Parser yyparser;

  /* constructor taking an additional parser object */
  public PDL2Lexer(java.io.Reader r, PDL2Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }

  StringBuffer string = new StringBuffer();

  public int getLineNumber()
  {
    return yyline;
  }
  
  public int getColumnNumber()
  {
    return yycolumn;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PDL2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PDL2Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 51: break;
        case 30: 
          { return yyparser.CMP_LEQ;
          }
        case 52: break;
        case 43: 
          { yyparser.yylval = new PDL2ParserVal(1);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 53: break;
        case 29: 
          { return yyparser.TK_LSHIFT;
          }
        case 54: break;
        case 14: 
          { return yyparser.TK_OR;
          }
        case 55: break;
        case 31: 
          { return yyparser.TK_RSHIFT;
          }
        case 56: break;
        case 41: 
          { return yyparser.TK_URSHIFT;
          }
        case 57: break;
        case 34: 
          { return yyparser.ASSIGN;
          }
        case 58: break;
        case 8: 
          { return (int) yycharat(0);
          }
        case 59: break;
        case 39: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                             return yyparser.PACKETREF;
          }
        case 60: break;
        case 35: 
          { string.append('\t');
          }
        case 61: break;
        case 33: 
          { return yyparser.CMP_EQ;
          }
        case 62: break;
        case 3: 
          { return yyparser.TK_DIVIDE;
          }
        case 63: break;
        case 9: 
          { string.setLength(0); yybegin(STRING);
          }
        case 64: break;
        case 48: 
          { return yyparser.TK_DEFAULT;
          }
        case 65: break;
        case 21: 
          { return yyparser.TK_INTERROGATIONMARK;
          }
        case 66: break;
        case 16: 
          { return yyparser.TK_TILDE;
          }
        case 67: break;
        case 23: 
          { yybegin(YYINITIAL); 
                                   yyparser.yylval = new PDL2ParserVal(string.toString());
                                   return yyparser.STRING_LITERAL;
          }
        case 68: break;
        case 1: 
          { throw new Error("[line "+yyline+":"+yycolumn+"] Illegal character <"+
                                                    yytext()+">");
          }
        case 69: break;
        case 25: 
          { yyparser.yylval = new PDL2ParserVal(yytext().substring(1));
                                   return yyparser.LABEL;
          }
        case 70: break;
        case 24: 
          { string.append('\\');
          }
        case 71: break;
        case 36: 
          { string.append('\r');
          }
        case 72: break;
        case 45: 
          { yyparser.yylval = new PDL2ParserVal(0);
                             return yyparser.BOOLEAN_LITERAL;
          }
        case 73: break;
        case 18: 
          { return yyparser.CMP_LT;
          }
        case 74: break;
        case 50: 
          { return yyparser.CAST_TO_BOOLEAN;
          }
        case 75: break;
        case 26: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseDual(yytext()));
                                   return yyparser.DUAL_INTEGER_LITERAL;
          }
        case 76: break;
        case 49: 
          { return yyparser.TK_MESSAGEID;
          }
        case 77: break;
        case 38: 
          { string.append('\"');
          }
        case 78: break;
        case 20: 
          { return yyparser.TK_EQ;
          }
        case 79: break;
        case 44: 
          { return yyparser.TK_CASE;
          }
        case 80: break;
        case 42: 
          { return yyparser.TK_FAIL;
          }
        case 81: break;
        case 47: 
          { return yyparser.TK_SWITCH;
          }
        case 82: break;
        case 37: 
          { string.append('\n');
          }
        case 83: break;
        case 15: 
          { return yyparser.TK_XOR;
          }
        case 84: break;
        case 10: 
          { return yyparser.TK_PLUS;
          }
        case 85: break;
        case 5: 
          { yyparser.yylval = new PDL2ParserVal(yytext());
                                   return yyparser.IDENTIFIER;
          }
        case 86: break;
        case 46: 
          { return yyparser.CAST_TO_INT;
          }
        case 87: break;
        case 40: 
          { yyparser.yylval = new PDL2ParserVal(PDLUtils.parseHex(yytext()));
                                   return yyparser.HEX_INTEGER_LITERAL;
          }
        case 88: break;
        case 28: 
          { return yyparser.CMP_NEQ;
          }
        case 89: break;
        case 7: 
          { yyparser.yylval = new PDL2ParserVal(Integer.parseInt(yytext()));
                                   return yyparser.DEC_INTEGER_LITERAL;
          }
        case 90: break;
        case 6: 
          { return yyparser.TKDOLLAR;
          }
        case 91: break;
        case 11: 
          { return yyparser.TK_MINUS;
          }
        case 92: break;
        case 13: 
          { return yyparser.TK_AND;
          }
        case 93: break;
        case 17: 
          { return yyparser.TK_NOT;
          }
        case 94: break;
        case 19: 
          { return yyparser.CMP_GT;
          }
        case 95: break;
        case 4: 
          { return yyparser.TK_TIMES;
          }
        case 96: break;
        case 22: 
          { string.append( yytext() );
          }
        case 97: break;
        case 32: 
          { return yyparser.CMP_GEQ;
          }
        case 98: break;
        case 27: 
          { return yyparser.IF;
          }
        case 99: break;
        case 12: 
          { return yyparser.TK_PERCENT;
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
