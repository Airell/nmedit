#    ModuleDescriptions Schema Version 1.3
#    Creation time: 2006-12-05
#    Author: Christian Schneider

# namespaces
default namespace = "http://nmedit.sf.net/ns/ModuleDescriptions"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes" 
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Pair of attributes (type, value).
# 'type' restricts the value to following types: xsd:boolean, xsd:float, xsd:double. xsd:integer, xsd:string.
# If the 'type' is 'string' then the 'type' attribute must not be specified.
# It is possible to use an type defined in the 'defs'-section.
typedValue = 
	(
		( attribute type { "boolean" }, attribute value { xsd:boolean } )
		& ( attribute type { "float" }, attribute value { xsd:float } )
		& ( attribute type { "double" }, attribute value { xsd:double } )
		& ( attribute type { "integer" }, attribute value { xsd:integer } )
		& ( attribute type { "string" }?, attribute value { text }	)
	)

# Allows the definition of custom attributes and restrict their value to a specific type.
\attribute =
	element attribute
	{
		attribute id { xsd:ID }?,
		attribute name { text },
		typedValue
	}

# Element for comments
comment = element comment { text }

# The connector element
connectorElem = element connector
	{
		attribute name { text },
		attribute id { xsd:ID }?,
		attribute key { text }?,
		attribute class { text }?,
		attribute type { "input" | "output" },
		attribute signal { text },

		comment?,
		\attribute*
	}

# The parameter element
parameterElem = element parameter
	{
		attribute name { text },
		attribute id { xsd:ID }?,
		attribute key { text }?,
		attribute class { text }?,
	    [a:defaultValue="0"]
		attribute minValue { xsd:integer }?,
	    [a:defaultValue="127"]
		attribute maxValue { xsd:integer }?,
	    [a:defaultValue="0"]
		attribute defaultValue { xsd:integer }?,
		(
			(attribute format-id { text })
			& (attribute formatter { text })
		)?,

		comment?,
		\attribute*
	}

# vendor description
vendor = 
	element vendor 
	{
		attribute url { text }?,
		text 
	}

# the header element
header =
	element header
	{
		vendor
		& element device
		{
			element model { text },
			vendor,
			element version
			{
				attribute type { text }?,
				text
			}*
		}
		& (element property
		{
			element name { text },
			text
		}*)
	}

moduleElementBody = 
	(
		attribute name { text },
		attribute display-name { text }?,
		attribute id { xsd:ID }?,
		attribute key { text }?,
		attribute category { text }?,
		attribute category-id { text }?,
		attribute class { text }?,

		comment?,
		(
			\attribute
			& connectorElem
			& parameterElem
		)*
	)

# Defines a custom type. Each value is a pair (xsd:integer, xsd:string).
defTypeElem =
	element def-type
	{
		comment ?,
		attribute name { text },
		element enumeration
		{
			attribute key { xsd:integer },
			attribute value { text }
		}+
	}
	
signalDefElem =
	element def-signal
	{
		comment ?,
		element signal
		{
			attribute key { xsd:integer },
		    attribute type { text }
		}+
	}

# definitions
defs = element defs
	{
		signalDefElem?,
		defTypeElem*
	}
	
inlineContent =
  (
	element code { text }
	& element link { attribute href { text }, text }
    & element mail { attribute mailto { text }, text }
  )

blockContent =
  (
    element pre { inlineContent }
    & element list { element item { inlineContent } }
  )

annotation = element annotation
  {
	element section 
    { 
	  element title { text }, 
	  (
		  (
		  inlineContent
		  & blockContent
		  & text
		 )*
      )
    }*
  }

# The root element
start = element ModuleDescriptions
	{
		attribute version { text },
		header,
		annotation?,
		defs?,
		element body 
		{
			element module { moduleElementBody } *
		}
	}
